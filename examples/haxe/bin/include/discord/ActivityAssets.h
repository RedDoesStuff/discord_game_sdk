// Generated by Haxe 4.3.3
#ifndef INCLUDED_discord_ActivityAssets
#define INCLUDED_discord_ActivityAssets

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_6c479409f713367e_431_new)
#ifndef INCLUDED_6db1f306f8fa425f
#define INCLUDED_6db1f306f8fa425f
#include "C:/Users/Home/Documents/GitHub/discord_game_sdk/haxe/discord/_internal/ffi.h"
#endif
HX_DECLARE_CLASS1(discord,ActivityAssets)

namespace discord{


class HXCPP_CLASS_ATTRIBUTES ActivityAssets_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef ActivityAssets_obj OBJ_;
		ActivityAssets_obj();

	public:
		enum { _hx_ClassId = 0x3653889a };

		void __construct(::String largeImage,::String largeText,::String smallImage,::String smallText);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="discord.ActivityAssets")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"discord.ActivityAssets"); }

		inline static ::hx::ObjectPtr< ActivityAssets_obj > __new(::String largeImage,::String largeText,::String smallImage,::String smallText) {
			::hx::ObjectPtr< ActivityAssets_obj > __this = new ActivityAssets_obj();
			__this->__construct(largeImage,largeText,smallImage,smallText);
			return __this;
		}

		inline static ::hx::ObjectPtr< ActivityAssets_obj > __alloc(::hx::Ctx *_hx_ctx,::String largeImage,::String largeText,::String smallImage,::String smallText) {
			ActivityAssets_obj *__this = (ActivityAssets_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ActivityAssets_obj), true, "discord.ActivityAssets"));
			*(void **)__this = ActivityAssets_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_6c479409f713367e_431_new)
HXLINE( 432)		::String tmp = largeImage;
HXDLIN( 432)		::String _hx_tmp;
HXDLIN( 432)		if (::hx::IsNotNull( tmp )) {
HXLINE( 432)			_hx_tmp = tmp;
            		}
            		else {
HXLINE( 432)			_hx_tmp = HX_("",00,00,00,00);
            		}
HXDLIN( 432)		( ( ::discord::ActivityAssets)(__this) )->set_largeImage(_hx_tmp);
HXLINE( 433)		::String tmp1 = largeText;
HXDLIN( 433)		::String _hx_tmp1;
HXDLIN( 433)		if (::hx::IsNotNull( tmp1 )) {
HXLINE( 433)			_hx_tmp1 = tmp1;
            		}
            		else {
HXLINE( 433)			_hx_tmp1 = HX_("",00,00,00,00);
            		}
HXDLIN( 433)		( ( ::discord::ActivityAssets)(__this) )->set_largeText(_hx_tmp1);
HXLINE( 434)		::String tmp2 = smallImage;
HXDLIN( 434)		::String _hx_tmp2;
HXDLIN( 434)		if (::hx::IsNotNull( tmp2 )) {
HXLINE( 434)			_hx_tmp2 = tmp2;
            		}
            		else {
HXLINE( 434)			_hx_tmp2 = HX_("",00,00,00,00);
            		}
HXDLIN( 434)		( ( ::discord::ActivityAssets)(__this) )->set_smallImage(_hx_tmp2);
HXLINE( 435)		::String tmp3 = smallText;
HXDLIN( 435)		::String _hx_tmp3;
HXDLIN( 435)		if (::hx::IsNotNull( tmp3 )) {
HXLINE( 435)			_hx_tmp3 = tmp3;
            		}
            		else {
HXLINE( 435)			_hx_tmp3 = HX_("",00,00,00,00);
            		}
HXDLIN( 435)		( ( ::discord::ActivityAssets)(__this) )->set_smallText(_hx_tmp3);
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~ActivityAssets_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("ActivityAssets",d2,43,da,47); }

		 DiscordActivityAssets internal_;
		::String get_largeImage();
		::Dynamic get_largeImage_dyn();

		::String set_largeImage(::String v);
		::Dynamic set_largeImage_dyn();

		::String get_largeText();
		::Dynamic get_largeText_dyn();

		::String set_largeText(::String v);
		::Dynamic set_largeText_dyn();

		::String get_smallImage();
		::Dynamic get_smallImage_dyn();

		::String set_smallImage(::String v);
		::Dynamic set_smallImage_dyn();

		::String get_smallText();
		::Dynamic get_smallText_dyn();

		::String set_smallText(::String v);
		::Dynamic set_smallText_dyn();

};

} // end namespace discord

#endif /* INCLUDED_discord_ActivityAssets */ 
