// Generated by Haxe 4.3.3
#ifndef INCLUDED_discord_ActivityTimestamps
#define INCLUDED_discord_ActivityTimestamps

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_004c568e517c174e_402_new)
#ifndef INCLUDED_6db1f306f8fa425f
#define INCLUDED_6db1f306f8fa425f
#include "C:/Users/Home/Documents/GitHub/discord_game_sdk/haxe/discord/_internal/ffi.h"
#endif
HX_DECLARE_CLASS1(discord,ActivityTimestamps)

namespace discord{


class HXCPP_CLASS_ATTRIBUTES ActivityTimestamps_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef ActivityTimestamps_obj OBJ_;
		ActivityTimestamps_obj();

	public:
		enum { _hx_ClassId = 0x05c799c8 };

		void __construct( ::Dynamic start, ::Dynamic end);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="discord.ActivityTimestamps")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"discord.ActivityTimestamps"); }

		inline static ::hx::ObjectPtr< ActivityTimestamps_obj > __new( ::Dynamic start, ::Dynamic end) {
			::hx::ObjectPtr< ActivityTimestamps_obj > __this = new ActivityTimestamps_obj();
			__this->__construct(start,end);
			return __this;
		}

		inline static ::hx::ObjectPtr< ActivityTimestamps_obj > __alloc(::hx::Ctx *_hx_ctx, ::Dynamic start, ::Dynamic end) {
			ActivityTimestamps_obj *__this = (ActivityTimestamps_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ActivityTimestamps_obj), true, "discord.ActivityTimestamps"));
			*(void **)__this = ActivityTimestamps_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_004c568e517c174e_402_new)
HXLINE( 403)		 ::Dynamic tmp = start;
HXDLIN( 403)		::cpp::Int64 _hx_tmp;
HXDLIN( 403)		if (::hx::IsNotNull( tmp )) {
HXLINE( 403)			_hx_tmp = ( (::cpp::Int64)(tmp) );
            		}
            		else {
HXLINE( 403)			_hx_tmp = ( (::cpp::Int64)(0) );
            		}
HXDLIN( 403)		( ( ::discord::ActivityTimestamps)(__this) )->set_start(_hx_tmp);
HXLINE( 404)		 ::Dynamic tmp1 = end;
HXDLIN( 404)		::cpp::Int64 _hx_tmp1;
HXDLIN( 404)		if (::hx::IsNotNull( tmp1 )) {
HXLINE( 404)			_hx_tmp1 = ( (::cpp::Int64)(tmp1) );
            		}
            		else {
HXLINE( 404)			_hx_tmp1 = ( (::cpp::Int64)(0) );
            		}
HXDLIN( 404)		( ( ::discord::ActivityTimestamps)(__this) )->set_end(_hx_tmp1);
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~ActivityTimestamps_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("ActivityTimestamps",ac,b5,43,1e); }

		 DiscordActivityTimestamps internal_;
		::cpp::Int64 get_start();
		::Dynamic get_start_dyn();

		::cpp::Int64 set_start(::cpp::Int64 v);
		::Dynamic set_start_dyn();

		::cpp::Int64 get_end();
		::Dynamic get_end_dyn();

		::cpp::Int64 set_end(::cpp::Int64 v);
		::Dynamic set_end_dyn();

};

} // end namespace discord

#endif /* INCLUDED_discord_ActivityTimestamps */ 
