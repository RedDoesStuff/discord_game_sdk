// Generated by Haxe 4.3.3
#ifndef INCLUDED_discord_ImeUnderline
#define INCLUDED_discord_ImeUnderline

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_548ca7b3597f6f87_904_new)
#ifndef INCLUDED_6db1f306f8fa425f
#define INCLUDED_6db1f306f8fa425f
#include "C:/Users/Home/Documents/GitHub/discord_game_sdk/haxe/discord/_internal/ffi.h"
#endif
HX_DECLARE_CLASS1(discord,ImeUnderline)

namespace discord{


class HXCPP_CLASS_ATTRIBUTES ImeUnderline_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef ImeUnderline_obj OBJ_;
		ImeUnderline_obj();

	public:
		enum { _hx_ClassId = 0x1833bbcf };

		void __construct( ::Dynamic from, ::Dynamic to, ::Dynamic color, ::Dynamic backgroundColor, ::Dynamic thick);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="discord.ImeUnderline")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"discord.ImeUnderline"); }

		inline static ::hx::ObjectPtr< ImeUnderline_obj > __new( ::Dynamic from, ::Dynamic to, ::Dynamic color, ::Dynamic backgroundColor, ::Dynamic thick) {
			::hx::ObjectPtr< ImeUnderline_obj > __this = new ImeUnderline_obj();
			__this->__construct(from,to,color,backgroundColor,thick);
			return __this;
		}

		inline static ::hx::ObjectPtr< ImeUnderline_obj > __alloc(::hx::Ctx *_hx_ctx, ::Dynamic from, ::Dynamic to, ::Dynamic color, ::Dynamic backgroundColor, ::Dynamic thick) {
			ImeUnderline_obj *__this = (ImeUnderline_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ImeUnderline_obj), true, "discord.ImeUnderline"));
			*(void **)__this = ImeUnderline_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_548ca7b3597f6f87_904_new)
HXLINE( 905)		 ::Dynamic tmp = from;
HXDLIN( 905)		int _hx_tmp;
HXDLIN( 905)		if (::hx::IsNotNull( tmp )) {
HXLINE( 905)			_hx_tmp = ( (int)(tmp) );
            		}
            		else {
HXLINE( 905)			_hx_tmp = 0;
            		}
HXDLIN( 905)		( ( ::discord::ImeUnderline)(__this) )->set_from(_hx_tmp);
HXLINE( 906)		 ::Dynamic tmp1 = to;
HXDLIN( 906)		int _hx_tmp1;
HXDLIN( 906)		if (::hx::IsNotNull( tmp1 )) {
HXLINE( 906)			_hx_tmp1 = ( (int)(tmp1) );
            		}
            		else {
HXLINE( 906)			_hx_tmp1 = 0;
            		}
HXDLIN( 906)		( ( ::discord::ImeUnderline)(__this) )->set_to(_hx_tmp1);
HXLINE( 907)		 ::Dynamic tmp2 = color;
HXDLIN( 907)		unsigned int _hx_tmp2;
HXDLIN( 907)		if (::hx::IsNotNull( tmp2 )) {
HXLINE( 907)			_hx_tmp2 = ( (unsigned int)(tmp2) );
            		}
            		else {
HXLINE( 907)			_hx_tmp2 = ( (unsigned int)(0) );
            		}
HXDLIN( 907)		( ( ::discord::ImeUnderline)(__this) )->set_color(_hx_tmp2);
HXLINE( 908)		 ::Dynamic tmp3 = backgroundColor;
HXDLIN( 908)		unsigned int _hx_tmp3;
HXDLIN( 908)		if (::hx::IsNotNull( tmp3 )) {
HXLINE( 908)			_hx_tmp3 = ( (unsigned int)(tmp3) );
            		}
            		else {
HXLINE( 908)			_hx_tmp3 = ( (unsigned int)(0) );
            		}
HXDLIN( 908)		( ( ::discord::ImeUnderline)(__this) )->set_backgroundColor(_hx_tmp3);
HXLINE( 909)		 ::Dynamic tmp4 = thick;
HXDLIN( 909)		bool _hx_tmp4;
HXDLIN( 909)		if (::hx::IsNotNull( tmp4 )) {
HXLINE( 909)			_hx_tmp4 = ( (bool)(tmp4) );
            		}
            		else {
HXLINE( 909)			_hx_tmp4 = false;
            		}
HXDLIN( 909)		( ( ::discord::ImeUnderline)(__this) )->set_thick(_hx_tmp4);
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~ImeUnderline_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("ImeUnderline",eb,2c,4f,a5); }

		 DiscordImeUnderline internal_;
		int get_from();
		::Dynamic get_from_dyn();

		int set_from(int v);
		::Dynamic set_from_dyn();

		int get_to();
		::Dynamic get_to_dyn();

		int set_to(int v);
		::Dynamic set_to_dyn();

		unsigned int get_color();
		::Dynamic get_color_dyn();

		unsigned int set_color(unsigned int v);
		::Dynamic set_color_dyn();

		unsigned int get_backgroundColor();
		::Dynamic get_backgroundColor_dyn();

		unsigned int set_backgroundColor(unsigned int v);
		::Dynamic set_backgroundColor_dyn();

		bool get_thick();
		::Dynamic get_thick_dyn();

		bool set_thick(bool v);
		::Dynamic set_thick_dyn();

};

} // end namespace discord

#endif /* INCLUDED_discord_ImeUnderline */ 
