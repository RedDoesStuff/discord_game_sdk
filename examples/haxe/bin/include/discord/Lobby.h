// Generated by Haxe 4.3.3
#ifndef INCLUDED_discord_Lobby
#define INCLUDED_discord_Lobby

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_8776a44152521a1f_828_new)
#ifndef INCLUDED_6db1f306f8fa425f
#define INCLUDED_6db1f306f8fa425f
#include "C:/Users/Home/Documents/GitHub/discord_game_sdk/haxe/discord/_internal/ffi.h"
#endif
HX_DECLARE_CLASS1(discord,Lobby)

namespace discord{


class HXCPP_CLASS_ATTRIBUTES Lobby_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Lobby_obj OBJ_;
		Lobby_obj();

	public:
		enum { _hx_ClassId = 0x38c1e3ca };

		void __construct( ::Dynamic id, ::Dynamic type, ::Dynamic ownerID,::String secret, ::Dynamic capacity, ::Dynamic locked);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="discord.Lobby")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"discord.Lobby"); }

		inline static ::hx::ObjectPtr< Lobby_obj > __new( ::Dynamic id, ::Dynamic type, ::Dynamic ownerID,::String secret, ::Dynamic capacity, ::Dynamic locked) {
			::hx::ObjectPtr< Lobby_obj > __this = new Lobby_obj();
			__this->__construct(id,type,ownerID,secret,capacity,locked);
			return __this;
		}

		inline static ::hx::ObjectPtr< Lobby_obj > __alloc(::hx::Ctx *_hx_ctx, ::Dynamic id, ::Dynamic type, ::Dynamic ownerID,::String secret, ::Dynamic capacity, ::Dynamic locked) {
			Lobby_obj *__this = (Lobby_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Lobby_obj), true, "discord.Lobby"));
			*(void **)__this = Lobby_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_8776a44152521a1f_828_new)
HXLINE( 829)		 ::Dynamic tmp = id;
HXDLIN( 829)		::cpp::Int64 _hx_tmp;
HXDLIN( 829)		if (::hx::IsNotNull( tmp )) {
HXLINE( 829)			_hx_tmp = ( (::cpp::Int64)(tmp) );
            		}
            		else {
HXLINE( 829)			_hx_tmp = ( (::cpp::Int64)(0) );
            		}
HXDLIN( 829)		( ( ::discord::Lobby)(__this) )->set_id(_hx_tmp);
HXLINE( 830)		 ::Dynamic tmp1 = type;
HXDLIN( 830)		int _hx_tmp1;
HXDLIN( 830)		if (::hx::IsNotNull( tmp1 )) {
HXLINE( 830)			_hx_tmp1 = ( (int)(tmp1) );
            		}
            		else {
HXLINE( 830)			_hx_tmp1 = 1;
            		}
HXDLIN( 830)		( ( ::discord::Lobby)(__this) )->set_type(_hx_tmp1);
HXLINE( 831)		 ::Dynamic tmp2 = ownerID;
HXDLIN( 831)		::cpp::Int64 _hx_tmp2;
HXDLIN( 831)		if (::hx::IsNotNull( tmp2 )) {
HXLINE( 831)			_hx_tmp2 = ( (::cpp::Int64)(tmp2) );
            		}
            		else {
HXLINE( 831)			_hx_tmp2 = ( (::cpp::Int64)(0) );
            		}
HXDLIN( 831)		( ( ::discord::Lobby)(__this) )->set_ownerID(_hx_tmp2);
HXLINE( 832)		::String tmp3 = secret;
HXDLIN( 832)		::String _hx_tmp3;
HXDLIN( 832)		if (::hx::IsNotNull( tmp3 )) {
HXLINE( 832)			_hx_tmp3 = tmp3;
            		}
            		else {
HXLINE( 832)			_hx_tmp3 = HX_("",00,00,00,00).utf8_str();
            		}
HXDLIN( 832)		( ( ::discord::Lobby)(__this) )->set_secret(_hx_tmp3);
HXLINE( 833)		 ::Dynamic tmp4 = capacity;
HXDLIN( 833)		unsigned int _hx_tmp4;
HXDLIN( 833)		if (::hx::IsNotNull( tmp4 )) {
HXLINE( 833)			_hx_tmp4 = ( (unsigned int)(tmp4) );
            		}
            		else {
HXLINE( 833)			_hx_tmp4 = ( (unsigned int)(0) );
            		}
HXDLIN( 833)		( ( ::discord::Lobby)(__this) )->set_capacity(_hx_tmp4);
HXLINE( 834)		 ::Dynamic tmp5 = locked;
HXDLIN( 834)		bool _hx_tmp5;
HXDLIN( 834)		if (::hx::IsNotNull( tmp5 )) {
HXLINE( 834)			_hx_tmp5 = ( (bool)(tmp5) );
            		}
            		else {
HXLINE( 834)			_hx_tmp5 = false;
            		}
HXDLIN( 834)		( ( ::discord::Lobby)(__this) )->set_locked(_hx_tmp5);
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Lobby_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Lobby",f6,77,1d,0c); }

		 DiscordLobby internal_;
		::cpp::Int64 get_id();
		::Dynamic get_id_dyn();

		::cpp::Int64 set_id(::cpp::Int64 v);
		::Dynamic set_id_dyn();

		int get_type();
		::Dynamic get_type_dyn();

		int set_type(int v);
		::Dynamic set_type_dyn();

		::cpp::Int64 get_ownerID();
		::Dynamic get_ownerID_dyn();

		::cpp::Int64 set_ownerID(::cpp::Int64 v);
		::Dynamic set_ownerID_dyn();

		::String get_secret();
		::Dynamic get_secret_dyn();

		::String set_secret(::String v);
		::Dynamic set_secret_dyn();

		unsigned int get_capacity();
		::Dynamic get_capacity_dyn();

		unsigned int set_capacity(unsigned int v);
		::Dynamic set_capacity_dyn();

		bool get_locked();
		::Dynamic get_locked_dyn();

		bool set_locked(bool v);
		::Dynamic set_locked_dyn();

};

} // end namespace discord

#endif /* INCLUDED_discord_Lobby */ 
