// Generated by Haxe 4.3.3
#ifndef INCLUDED_discord_LobbySearchQuery
#define INCLUDED_discord_LobbySearchQuery

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_aa4a7efcaa0016d9_1326_new)
#ifndef INCLUDED_6db1f306f8fa425f
#define INCLUDED_6db1f306f8fa425f
#include "C:/Users/Home/Documents/GitHub/discord_game_sdk/haxe/discord/_internal/ffi.h"
#endif
HX_DECLARE_CLASS1(discord,LobbySearchQuery)

namespace discord{


class HXCPP_CLASS_ATTRIBUTES LobbySearchQuery_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef LobbySearchQuery_obj OBJ_;
		LobbySearchQuery_obj();

	public:
		enum { _hx_ClassId = 0x224560f2 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="discord.LobbySearchQuery")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"discord.LobbySearchQuery"); }

		inline static ::hx::ObjectPtr< LobbySearchQuery_obj > __new() {
			::hx::ObjectPtr< LobbySearchQuery_obj > __this = new LobbySearchQuery_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< LobbySearchQuery_obj > __alloc(::hx::Ctx *_hx_ctx) {
			LobbySearchQuery_obj *__this = (LobbySearchQuery_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(LobbySearchQuery_obj), true, "discord.LobbySearchQuery"));
			*(void **)__this = LobbySearchQuery_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_aa4a7efcaa0016d9_1326_new)
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~LobbySearchQuery_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("LobbySearchQuery",2a,5a,5b,af); }

		 IDiscordLobbySearchQuery* internal_;
		int filter(::String key,int comparison,int search_cast,::String value);
		::Dynamic filter_dyn();

		int sort(::String key,int search_cast,::String value);
		::Dynamic sort_dyn();

		int limit(unsigned int limit);
		::Dynamic limit_dyn();

		int distance(int distance);
		::Dynamic distance_dyn();

};

} // end namespace discord

#endif /* INCLUDED_discord_LobbySearchQuery */ 
