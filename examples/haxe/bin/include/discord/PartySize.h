// Generated by Haxe 4.3.3
#ifndef INCLUDED_discord_PartySize
#define INCLUDED_discord_PartySize

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_5a664c81e3c33cc7_491_new)
#ifndef INCLUDED_6db1f306f8fa425f
#define INCLUDED_6db1f306f8fa425f
#include "C:/Users/Home/Documents/GitHub/discord_game_sdk/haxe/discord/_internal/ffi.h"
#endif
HX_DECLARE_CLASS1(discord,PartySize)

namespace discord{


class HXCPP_CLASS_ATTRIBUTES PartySize_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef PartySize_obj OBJ_;
		PartySize_obj();

	public:
		enum { _hx_ClassId = 0x06c8b91f };

		void __construct( ::Dynamic currentSize, ::Dynamic maxSize);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="discord.PartySize")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"discord.PartySize"); }

		inline static ::hx::ObjectPtr< PartySize_obj > __new( ::Dynamic currentSize, ::Dynamic maxSize) {
			::hx::ObjectPtr< PartySize_obj > __this = new PartySize_obj();
			__this->__construct(currentSize,maxSize);
			return __this;
		}

		inline static ::hx::ObjectPtr< PartySize_obj > __alloc(::hx::Ctx *_hx_ctx, ::Dynamic currentSize, ::Dynamic maxSize) {
			PartySize_obj *__this = (PartySize_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(PartySize_obj), true, "discord.PartySize"));
			*(void **)__this = PartySize_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_5a664c81e3c33cc7_491_new)
HXLINE( 492)		 ::Dynamic tmp = currentSize;
HXDLIN( 492)		int _hx_tmp;
HXDLIN( 492)		if (::hx::IsNotNull( tmp )) {
HXLINE( 492)			_hx_tmp = ( (int)(tmp) );
            		}
            		else {
HXLINE( 492)			_hx_tmp = 0;
            		}
HXDLIN( 492)		( ( ::discord::PartySize)(__this) )->set_currentSize(_hx_tmp);
HXLINE( 493)		 ::Dynamic tmp1 = maxSize;
HXDLIN( 493)		int _hx_tmp1;
HXDLIN( 493)		if (::hx::IsNotNull( tmp1 )) {
HXLINE( 493)			_hx_tmp1 = ( (int)(tmp1) );
            		}
            		else {
HXLINE( 493)			_hx_tmp1 = 0;
            		}
HXDLIN( 493)		( ( ::discord::PartySize)(__this) )->set_maxSize(_hx_tmp1);
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~PartySize_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("PartySize",e7,c8,2b,60); }

		 DiscordPartySize internal_;
		int get_currentSize();
		::Dynamic get_currentSize_dyn();

		int set_currentSize(int v);
		::Dynamic set_currentSize_dyn();

		int get_maxSize();
		::Dynamic get_maxSize_dyn();

		int set_maxSize(int v);
		::Dynamic set_maxSize_dyn();

};

} // end namespace discord

#endif /* INCLUDED_discord_PartySize */ 
