// Generated by Haxe 4.3.3
#ifndef INCLUDED_discord_Rect
#define INCLUDED_discord_Rect

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_b56313d94c554d42_967_new)
#ifndef INCLUDED_6db1f306f8fa425f
#define INCLUDED_6db1f306f8fa425f
#include "C:/Users/Home/Documents/GitHub/discord_game_sdk/haxe/discord/_internal/ffi.h"
#endif
HX_DECLARE_CLASS1(discord,Rect)

namespace discord{


class HXCPP_CLASS_ATTRIBUTES Rect_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Rect_obj OBJ_;
		Rect_obj();

	public:
		enum { _hx_ClassId = 0x4da963f0 };

		void __construct( ::Dynamic left, ::Dynamic top, ::Dynamic right, ::Dynamic bottom);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="discord.Rect")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"discord.Rect"); }

		inline static ::hx::ObjectPtr< Rect_obj > __new( ::Dynamic left, ::Dynamic top, ::Dynamic right, ::Dynamic bottom) {
			::hx::ObjectPtr< Rect_obj > __this = new Rect_obj();
			__this->__construct(left,top,right,bottom);
			return __this;
		}

		inline static ::hx::ObjectPtr< Rect_obj > __alloc(::hx::Ctx *_hx_ctx, ::Dynamic left, ::Dynamic top, ::Dynamic right, ::Dynamic bottom) {
			Rect_obj *__this = (Rect_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Rect_obj), true, "discord.Rect"));
			*(void **)__this = Rect_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_b56313d94c554d42_967_new)
HXLINE( 968)		 ::Dynamic tmp = left;
HXDLIN( 968)		int _hx_tmp;
HXDLIN( 968)		if (::hx::IsNotNull( tmp )) {
HXLINE( 968)			_hx_tmp = ( (int)(tmp) );
            		}
            		else {
HXLINE( 968)			_hx_tmp = 0;
            		}
HXDLIN( 968)		( ( ::discord::Rect)(__this) )->set_left(_hx_tmp);
HXLINE( 969)		 ::Dynamic tmp1 = top;
HXDLIN( 969)		int _hx_tmp1;
HXDLIN( 969)		if (::hx::IsNotNull( tmp1 )) {
HXLINE( 969)			_hx_tmp1 = ( (int)(tmp1) );
            		}
            		else {
HXLINE( 969)			_hx_tmp1 = 0;
            		}
HXDLIN( 969)		( ( ::discord::Rect)(__this) )->set_top(_hx_tmp1);
HXLINE( 970)		 ::Dynamic tmp2 = right;
HXDLIN( 970)		int _hx_tmp2;
HXDLIN( 970)		if (::hx::IsNotNull( tmp2 )) {
HXLINE( 970)			_hx_tmp2 = ( (int)(tmp2) );
            		}
            		else {
HXLINE( 970)			_hx_tmp2 = 0;
            		}
HXDLIN( 970)		( ( ::discord::Rect)(__this) )->set_right(_hx_tmp2);
HXLINE( 971)		 ::Dynamic tmp3 = bottom;
HXDLIN( 971)		int _hx_tmp3;
HXDLIN( 971)		if (::hx::IsNotNull( tmp3 )) {
HXLINE( 971)			_hx_tmp3 = ( (int)(tmp3) );
            		}
            		else {
HXLINE( 971)			_hx_tmp3 = 0;
            		}
HXDLIN( 971)		( ( ::discord::Rect)(__this) )->set_bottom(_hx_tmp3);
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Rect_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Rect",44,79,80,36); }

		 DiscordRect internal_;
		int get_left();
		::Dynamic get_left_dyn();

		int set_left(int v);
		::Dynamic set_left_dyn();

		int get_top();
		::Dynamic get_top_dyn();

		int set_top(int v);
		::Dynamic set_top_dyn();

		int get_right();
		::Dynamic get_right_dyn();

		int set_right(int v);
		::Dynamic set_right_dyn();

		int get_bottom();
		::Dynamic get_bottom_dyn();

		int set_bottom(int v);
		::Dynamic set_bottom_dyn();

};

} // end namespace discord

#endif /* INCLUDED_discord_Rect */ 
