// Generated by Haxe 4.3.3
#ifndef INCLUDED_discord_User
#define INCLUDED_discord_User

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_13ae84296067bd31_217_new)
#ifndef INCLUDED_6db1f306f8fa425f
#define INCLUDED_6db1f306f8fa425f
#include "C:/Users/Home/Documents/GitHub/discord_game_sdk/haxe/discord/_internal/ffi.h"
#endif
HX_DECLARE_CLASS1(discord,User)

namespace discord{


class HXCPP_CLASS_ATTRIBUTES User_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef User_obj OBJ_;
		User_obj();

	public:
		enum { _hx_ClassId = 0x4fafa917 };

		void __construct( ::Dynamic id,::String username,::String discriminator,::String avatar, ::Dynamic bot);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="discord.User")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"discord.User"); }

		inline static ::hx::ObjectPtr< User_obj > __new( ::Dynamic id,::String username,::String discriminator,::String avatar, ::Dynamic bot) {
			::hx::ObjectPtr< User_obj > __this = new User_obj();
			__this->__construct(id,username,discriminator,avatar,bot);
			return __this;
		}

		inline static ::hx::ObjectPtr< User_obj > __alloc(::hx::Ctx *_hx_ctx, ::Dynamic id,::String username,::String discriminator,::String avatar, ::Dynamic bot) {
			User_obj *__this = (User_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(User_obj), true, "discord.User"));
			*(void **)__this = User_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_13ae84296067bd31_217_new)
HXLINE( 218)		 ::Dynamic tmp = id;
HXDLIN( 218)		::cpp::Int64 _hx_tmp;
HXDLIN( 218)		if (::hx::IsNotNull( tmp )) {
HXLINE( 218)			_hx_tmp = ( (::cpp::Int64)(tmp) );
            		}
            		else {
HXLINE( 218)			_hx_tmp = ( (::cpp::Int64)(0) );
            		}
HXDLIN( 218)		( ( ::discord::User)(__this) )->set_id(_hx_tmp);
HXLINE( 219)		::String tmp1 = username;
HXDLIN( 219)		::String _hx_tmp1;
HXDLIN( 219)		if (::hx::IsNotNull( tmp1 )) {
HXLINE( 219)			_hx_tmp1 = tmp1;
            		}
            		else {
HXLINE( 219)			_hx_tmp1 = HX_("",00,00,00,00);
            		}
HXDLIN( 219)		( ( ::discord::User)(__this) )->set_username(_hx_tmp1);
HXLINE( 220)		::String tmp2 = discriminator;
HXDLIN( 220)		::String _hx_tmp2;
HXDLIN( 220)		if (::hx::IsNotNull( tmp2 )) {
HXLINE( 220)			_hx_tmp2 = tmp2;
            		}
            		else {
HXLINE( 220)			_hx_tmp2 = HX_("",00,00,00,00);
            		}
HXDLIN( 220)		( ( ::discord::User)(__this) )->set_discriminator(_hx_tmp2);
HXLINE( 221)		::String tmp3 = avatar;
HXDLIN( 221)		::String _hx_tmp3;
HXDLIN( 221)		if (::hx::IsNotNull( tmp3 )) {
HXLINE( 221)			_hx_tmp3 = tmp3;
            		}
            		else {
HXLINE( 221)			_hx_tmp3 = HX_("",00,00,00,00);
            		}
HXDLIN( 221)		( ( ::discord::User)(__this) )->set_avatar(_hx_tmp3);
HXLINE( 222)		 ::Dynamic tmp4 = bot;
HXDLIN( 222)		bool _hx_tmp4;
HXDLIN( 222)		if (::hx::IsNotNull( tmp4 )) {
HXLINE( 222)			_hx_tmp4 = ( (bool)(tmp4) );
            		}
            		else {
HXLINE( 222)			_hx_tmp4 = false;
            		}
HXDLIN( 222)		( ( ::discord::User)(__this) )->set_bot(_hx_tmp4);
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~User_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("User",6b,be,86,38); }

		 DiscordUser internal_;
		::cpp::Int64 get_id();
		::Dynamic get_id_dyn();

		::cpp::Int64 set_id(::cpp::Int64 v);
		::Dynamic set_id_dyn();

		::String get_username();
		::Dynamic get_username_dyn();

		::String set_username(::String v);
		::Dynamic set_username_dyn();

		::String get_discriminator();
		::Dynamic get_discriminator_dyn();

		::String set_discriminator(::String v);
		::Dynamic set_discriminator_dyn();

		::String get_avatar();
		::Dynamic get_avatar_dyn();

		::String set_avatar(::String v);
		::Dynamic set_avatar_dyn();

		bool get_bot();
		::Dynamic get_bot_dyn();

		bool set_bot(bool v);
		::Dynamic set_bot_dyn();

};

} // end namespace discord

#endif /* INCLUDED_discord_User */ 
