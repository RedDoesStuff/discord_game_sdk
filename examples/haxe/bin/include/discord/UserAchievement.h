// Generated by Haxe 4.3.3
#ifndef INCLUDED_discord_UserAchievement
#define INCLUDED_discord_UserAchievement

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_b25690ab00fef22e_1223_new)
#ifndef INCLUDED_6db1f306f8fa425f
#define INCLUDED_6db1f306f8fa425f
#include "C:/Users/Home/Documents/GitHub/discord_game_sdk/haxe/discord/_internal/ffi.h"
#endif
HX_DECLARE_CLASS1(discord,UserAchievement)

namespace discord{


class HXCPP_CLASS_ATTRIBUTES UserAchievement_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef UserAchievement_obj OBJ_;
		UserAchievement_obj();

	public:
		enum { _hx_ClassId = 0x0c1ef0c4 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="discord.UserAchievement")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"discord.UserAchievement"); }

		inline static ::hx::ObjectPtr< UserAchievement_obj > __new() {
			::hx::ObjectPtr< UserAchievement_obj > __this = new UserAchievement_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< UserAchievement_obj > __alloc(::hx::Ctx *_hx_ctx) {
			UserAchievement_obj *__this = (UserAchievement_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(UserAchievement_obj), true, "discord.UserAchievement"));
			*(void **)__this = UserAchievement_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_b25690ab00fef22e_1223_new)
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~UserAchievement_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("UserAchievement",c4,2b,88,fa); }

		 DiscordUserAchievement internal_;
		::cpp::Int64 get_userID();
		::Dynamic get_userID_dyn();

		::cpp::Int64 set_userID(::cpp::Int64 v);
		::Dynamic set_userID_dyn();

		::cpp::Int64 get_achievementID();
		::Dynamic get_achievementID_dyn();

		::cpp::Int64 set_achievementID(::cpp::Int64 v);
		::Dynamic set_achievementID_dyn();

		unsigned char get_percentComplete();
		::Dynamic get_percentComplete_dyn();

		unsigned char set_percentComplete(unsigned char v);
		::Dynamic set_percentComplete_dyn();

		::String get_unlockedAt();
		::Dynamic get_unlockedAt_dyn();

		::String set_unlockedAt(::String v);
		::Dynamic set_unlockedAt_dyn();

};

} // end namespace discord

#endif /* INCLUDED_discord_UserAchievement */ 
