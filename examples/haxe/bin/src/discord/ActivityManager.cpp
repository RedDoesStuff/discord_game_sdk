// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_6db1f306f8fa425f
#define INCLUDED_6db1f306f8fa425f
#include "C:/Users/Home/Documents/GitHub/discord_game_sdk/haxe/discord/_internal/ffi.h"
#endif
#ifndef INCLUDED_discord_Activity
#include <discord/Activity.h>
#endif
#ifndef INCLUDED_discord_ActivityManager
#include <discord/ActivityManager.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_66dacbbf0cd24777_20_new,"discord.ActivityManager","new",0xd78dc06e,"discord.ActivityManager.new","discord/ActivityManager.hx",20,0x3515bb03)
HX_LOCAL_STACK_FRAME(_hx_pos_66dacbbf0cd24777_24_registerCommand,"discord.ActivityManager","registerCommand",0xc36aa236,"discord.ActivityManager.registerCommand","discord/ActivityManager.hx",24,0x3515bb03)
HX_LOCAL_STACK_FRAME(_hx_pos_66dacbbf0cd24777_29_registerSteam,"discord.ActivityManager","registerSteam",0x82a6febb,"discord.ActivityManager.registerSteam","discord/ActivityManager.hx",29,0x3515bb03)
HX_LOCAL_STACK_FRAME(_hx_pos_66dacbbf0cd24777_49_updateActivity,"discord.ActivityManager","updateActivity",0x1b802faa,"discord.ActivityManager.updateActivity","discord/ActivityManager.hx",49,0x3515bb03)

	#include <memory>
	#include <functional>

namespace discord{

void ActivityManager_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_66dacbbf0cd24777_20_new)
            	}

Dynamic ActivityManager_obj::__CreateEmpty() { return new ActivityManager_obj; }

void *ActivityManager_obj::_hx_vtable = 0;

Dynamic ActivityManager_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ActivityManager_obj > _hx_result = new ActivityManager_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ActivityManager_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x04af7912;
}

int ActivityManager_obj::registerCommand(::String command){
            	HX_STACKFRAME(&_hx_pos_66dacbbf0cd24777_24_registerCommand)
            	return (int)internal_->register_command(internal_, const_cast<char*>(command.__s));

HXDLIN(  24)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ActivityManager_obj,registerCommand,return )

int ActivityManager_obj::registerSteam(unsigned int steamID){
            	HX_STACKFRAME(&_hx_pos_66dacbbf0cd24777_29_registerSteam)
            	return (int)internal_->register_steam(internal_, steamID);

HXDLIN(  29)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ActivityManager_obj,registerSteam,return )

void ActivityManager_obj::updateActivity( ::discord::Activity activity, ::Dynamic callback){
            	HX_STACKFRAME(&_hx_pos_66dacbbf0cd24777_49_updateActivity)
            	std::function<void(int)> _callback = [callback = std::move(callback)](int result) {
						const_cast<Dynamic&>(callback)(result);
					};

					static auto wrapper = [](void* callbackData, EDiscordResult result) -> void {
						std::unique_ptr<std::function<void(int)>> cb(reinterpret_cast<std::function<void(int)>*>(callbackData));
						if (!cb || !(*cb))
							return;
						(*cb)((int)result);
					};
					std::unique_ptr<std::function<void(int)>> cb{};
					cb.reset(new std::function<void(int)>(std::move(_callback)));
					internal_->update_activity(internal_, &activity->internal_, cb.release(), wrapper);

            	}


HX_DEFINE_DYNAMIC_FUNC2(ActivityManager_obj,updateActivity,(void))

 IDiscordActivityEvents ActivityManager_obj::events_;


::hx::ObjectPtr< ActivityManager_obj > ActivityManager_obj::__new() {
	::hx::ObjectPtr< ActivityManager_obj > __this = new ActivityManager_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< ActivityManager_obj > ActivityManager_obj::__alloc(::hx::Ctx *_hx_ctx) {
	ActivityManager_obj *__this = (ActivityManager_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ActivityManager_obj), true, "discord.ActivityManager"));
	*(void **)__this = ActivityManager_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ActivityManager_obj::ActivityManager_obj()
{
}

void ActivityManager_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ActivityManager);
	HX_MARK_MEMBER_NAME(internal_,"internal_");
	HX_MARK_END_CLASS();
}

void ActivityManager_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(internal_,"internal_");
}

::hx::Val ActivityManager_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 13:
		if (HX_FIELD_EQ(inName,"registerSteam") ) { return ::hx::Val( registerSteam_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"updateActivity") ) { return ::hx::Val( updateActivity_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"registerCommand") ) { return ::hx::Val( registerCommand_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool ActivityManager_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"events_") ) { outValue = ( cpp::Struct<  IDiscordActivityEvents >( events_ ) ); return true; }
	}
	return false;
}

bool ActivityManager_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"events_") ) { events_=ioValue.Cast< cpp::Struct<  IDiscordActivityEvents >  >(); return true; }
	}
	return false;
}

void ActivityManager_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("internal_",82,ee,23,3f));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo ActivityManager_obj_sMemberStorageInfo[] = {
	{::hx::fsUnknown /*  IDiscordActivityManager* */ ,(int)offsetof(ActivityManager_obj,internal_),HX_("internal_",82,ee,23,3f)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo ActivityManager_obj_sStaticStorageInfo[] = {
	{::hx::fsUnknown /*  IDiscordActivityEvents */ ,(void *) &ActivityManager_obj::events_,HX_("events_",26,e7,9a,06)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String ActivityManager_obj_sMemberFields[] = {
	HX_("registerCommand",28,d5,81,34),
	HX_("registerSteam",2d,31,77,79),
	HX_("updateActivity",f8,20,dc,1a),
	::String(null()) };

static void ActivityManager_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ActivityManager_obj::events_,"events_");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ActivityManager_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ActivityManager_obj::events_,"events_");
};

#endif

::hx::Class ActivityManager_obj::__mClass;

static ::String ActivityManager_obj_sStaticFields[] = {
	HX_("events_",26,e7,9a,06),
	::String(null())
};

void ActivityManager_obj::__register()
{
	ActivityManager_obj _hx_dummy;
	ActivityManager_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("discord.ActivityManager",7c,b1,f5,c7);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ActivityManager_obj::__GetStatic;
	__mClass->mSetStaticField = &ActivityManager_obj::__SetStatic;
	__mClass->mMarkFunc = ActivityManager_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(ActivityManager_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ActivityManager_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ActivityManager_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ActivityManager_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ActivityManager_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ActivityManager_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace discord
