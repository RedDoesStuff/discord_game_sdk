// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_6db1f306f8fa425f
#define INCLUDED_6db1f306f8fa425f
#include "C:/Users/Home/Documents/GitHub/discord_game_sdk/haxe/discord/_internal/ffi.h"
#endif
#ifndef INCLUDED_discord_ActivityParty
#include <discord/ActivityParty.h>
#endif
#ifndef INCLUDED_discord_PartySize
#include <discord/PartySize.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_7841179b52da436d_518_new,"discord.ActivityParty","new",0xe6acfde7,"discord.ActivityParty.new","discord/Types.hx",518,0xbb915808)
HX_LOCAL_STACK_FRAME(_hx_pos_7841179b52da436d_531_get_id,"discord.ActivityParty","get_id",0x924cb3fd,"discord.ActivityParty.get_id","discord/Types.hx",531,0xbb915808)
HX_LOCAL_STACK_FRAME(_hx_pos_7841179b52da436d_537_set_id,"discord.ActivityParty","set_id",0x5e950871,"discord.ActivityParty.set_id","discord/Types.hx",537,0xbb915808)
HX_LOCAL_STACK_FRAME(_hx_pos_7841179b52da436d_544_get_size,"discord.ActivityParty","get_size",0x4c7fc563,"discord.ActivityParty.get_size","discord/Types.hx",544,0xbb915808)
HX_LOCAL_STACK_FRAME(_hx_pos_7841179b52da436d_548_set_size,"discord.ActivityParty","set_size",0xfadd1ed7,"discord.ActivityParty.set_size","discord/Types.hx",548,0xbb915808)
HX_LOCAL_STACK_FRAME(_hx_pos_7841179b52da436d_554_get_privacy,"discord.ActivityParty","get_privacy",0x23860ae6,"discord.ActivityParty.get_privacy","discord/Types.hx",554,0xbb915808)
HX_LOCAL_STACK_FRAME(_hx_pos_7841179b52da436d_558_set_privacy,"discord.ActivityParty","set_privacy",0x2df311f2,"discord.ActivityParty.set_privacy","discord/Types.hx",558,0xbb915808)
namespace discord{

void ActivityParty_obj::__construct(::String id, ::discord::PartySize size, ::Dynamic privacy){
            	HX_GC_STACKFRAME(&_hx_pos_7841179b52da436d_518_new)
HXLINE( 540)		this->_size =  ::discord::PartySize_obj::__alloc( HX_CTX ,null(),null());
HXLINE( 523)		::String tmp = id;
HXDLIN( 523)		::String _hx_tmp;
HXDLIN( 523)		if (::hx::IsNotNull( tmp )) {
HXLINE( 523)			_hx_tmp = tmp;
            		}
            		else {
HXLINE( 523)			_hx_tmp = HX_("",00,00,00,00);
            		}
HXDLIN( 523)		this->set_id(_hx_tmp);
HXLINE( 524)		 ::discord::PartySize tmp1 = size;
HXDLIN( 524)		 ::discord::PartySize _hx_tmp1;
HXDLIN( 524)		if (::hx::IsNotNull( tmp1 )) {
HXLINE( 524)			_hx_tmp1 = tmp1;
            		}
            		else {
HXLINE( 524)			_hx_tmp1 =  ::discord::PartySize_obj::__alloc( HX_CTX ,null(),null());
            		}
HXDLIN( 524)		this->set_size(_hx_tmp1);
HXLINE( 525)		 ::Dynamic tmp2 = privacy;
HXDLIN( 525)		int _hx_tmp2;
HXDLIN( 525)		if (::hx::IsNotNull( tmp2 )) {
HXLINE( 525)			_hx_tmp2 = ( (int)(tmp2) );
            		}
            		else {
HXLINE( 525)			_hx_tmp2 = 0;
            		}
HXDLIN( 525)		this->set_privacy(_hx_tmp2);
            	}

Dynamic ActivityParty_obj::__CreateEmpty() { return new ActivityParty_obj; }

void *ActivityParty_obj::_hx_vtable = 0;

Dynamic ActivityParty_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ActivityParty_obj > _hx_result = new ActivityParty_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool ActivityParty_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2ee320ef;
}

::String ActivityParty_obj::get_id(){
            	HX_STACKFRAME(&_hx_pos_7841179b52da436d_531_get_id)
            	return internal_.id;

HXDLIN( 531)		return HX_("",00,00,00,00);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ActivityParty_obj,get_id,return )

::String ActivityParty_obj::set_id(::String v){
            	HX_STACKFRAME(&_hx_pos_7841179b52da436d_537_set_id)
            	strncpy(internal_.id, v, 128);
					internal_.id[128 - 1] = '\0';
					return internal_.id;

HXDLIN( 537)		return v;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ActivityParty_obj,set_id,return )

 ::discord::PartySize ActivityParty_obj::get_size(){
            	HX_STACKFRAME(&_hx_pos_7841179b52da436d_544_get_size)
            	_size->internal_ = internal_.size;

HXDLIN( 544)		return this->_size;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ActivityParty_obj,get_size,return )

 ::discord::PartySize ActivityParty_obj::set_size( ::discord::PartySize v){
            	HX_STACKFRAME(&_hx_pos_7841179b52da436d_548_set_size)
            	_size->internal_ = v->internal_;

HXDLIN( 548)		return this->_size;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ActivityParty_obj,set_size,return )

int ActivityParty_obj::get_privacy(){
            	HX_STACKFRAME(&_hx_pos_7841179b52da436d_554_get_privacy)
            	return (int)internal_.privacy;

HXDLIN( 554)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ActivityParty_obj,get_privacy,return )

int ActivityParty_obj::set_privacy(int v){
            	HX_STACKFRAME(&_hx_pos_7841179b52da436d_558_set_privacy)
            	internal_.privacy = (EDiscordActivityPartyPrivacy)v;

HXDLIN( 558)		return v;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ActivityParty_obj,set_privacy,return )


::hx::ObjectPtr< ActivityParty_obj > ActivityParty_obj::__new(::String id, ::discord::PartySize size, ::Dynamic privacy) {
	::hx::ObjectPtr< ActivityParty_obj > __this = new ActivityParty_obj();
	__this->__construct(id,size,privacy);
	return __this;
}

::hx::ObjectPtr< ActivityParty_obj > ActivityParty_obj::__alloc(::hx::Ctx *_hx_ctx,::String id, ::discord::PartySize size, ::Dynamic privacy) {
	ActivityParty_obj *__this = (ActivityParty_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ActivityParty_obj), true, "discord.ActivityParty"));
	*(void **)__this = ActivityParty_obj::_hx_vtable;
	__this->__construct(id,size,privacy);
	return __this;
}

ActivityParty_obj::ActivityParty_obj()
{
}

void ActivityParty_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ActivityParty);
	HX_MARK_MEMBER_NAME(internal_,"internal_");
	HX_MARK_MEMBER_NAME(_size,"_size");
	HX_MARK_END_CLASS();
}

void ActivityParty_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(internal_,"internal_");
	HX_VISIT_MEMBER_NAME(_size,"_size");
}

::hx::Val ActivityParty_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_id() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"size") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_size() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_size") ) { return ::hx::Val( _size ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"get_id") ) { return ::hx::Val( get_id_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_id") ) { return ::hx::Val( set_id_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"privacy") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_privacy() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"get_size") ) { return ::hx::Val( get_size_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_size") ) { return ::hx::Val( set_size_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"internal_") ) { return ::hx::Val( cpp::Struct<  DiscordActivityParty >( internal_ ) ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"get_privacy") ) { return ::hx::Val( get_privacy_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_privacy") ) { return ::hx::Val( set_privacy_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val ActivityParty_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_id(inValue.Cast< ::String >()) ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"size") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_size(inValue.Cast<  ::discord::PartySize >()) ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_size") ) { _size=inValue.Cast<  ::discord::PartySize >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"privacy") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_privacy(inValue.Cast< int >()) ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"internal_") ) { internal_=inValue.Cast< cpp::Struct<  DiscordActivityParty >  >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ActivityParty_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("internal_",82,ee,23,3f));
	outFields->push(HX_("id",db,5b,00,00));
	outFields->push(HX_("_size",a0,bc,64,ff));
	outFields->push(HX_("size",c1,a0,53,4c));
	outFields->push(HX_("privacy",48,1e,6f,89));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo ActivityParty_obj_sMemberStorageInfo[] = {
	{::hx::fsUnknown /*  DiscordActivityParty */ ,(int)offsetof(ActivityParty_obj,internal_),HX_("internal_",82,ee,23,3f)},
	{::hx::fsObject /*  ::discord::PartySize */ ,(int)offsetof(ActivityParty_obj,_size),HX_("_size",a0,bc,64,ff)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *ActivityParty_obj_sStaticStorageInfo = 0;
#endif

static ::String ActivityParty_obj_sMemberFields[] = {
	HX_("internal_",82,ee,23,3f),
	HX_("get_id",24,f3,2f,a3),
	HX_("set_id",98,47,78,6f),
	HX_("_size",a0,bc,64,ff),
	HX_("get_size",4a,5c,0e,cc),
	HX_("set_size",be,b5,6b,7a),
	HX_("get_privacy",5f,7e,69,0f),
	HX_("set_privacy",6b,85,d6,19),
	::String(null()) };

::hx::Class ActivityParty_obj::__mClass;

void ActivityParty_obj::__register()
{
	ActivityParty_obj _hx_dummy;
	ActivityParty_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("discord.ActivityParty",75,7e,f8,10);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ActivityParty_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ActivityParty_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ActivityParty_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ActivityParty_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace discord
