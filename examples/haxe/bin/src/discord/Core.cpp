// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_6db1f306f8fa425f
#define INCLUDED_6db1f306f8fa425f
#include "C:/Users/Home/Documents/GitHub/discord_game_sdk/haxe/discord/_internal/ffi.h"
#endif
#ifndef INCLUDED_discord_ActivityManager
#include <discord/ActivityManager.h>
#endif
#ifndef INCLUDED_discord_Core
#include <discord/Core.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_7ff51de226ebc807_89_new,"discord.Core","new",0x1bbb44f3,"discord.Core.new","discord/Core.hx",89,0x605a4bfc)
HX_LOCAL_STACK_FRAME(_hx_pos_7ff51de226ebc807_82_destroy,"discord.Core","destroy",0x9e9ee70d,"discord.Core.destroy","discord/Core.hx",82,0x605a4bfc)
HX_LOCAL_STACK_FRAME(_hx_pos_7ff51de226ebc807_86_runCallbacks,"discord.Core","runCallbacks",0xfe450b50,"discord.Core.runCallbacks","discord/Core.hx",86,0x605a4bfc)
HX_LOCAL_STACK_FRAME(_hx_pos_7ff51de226ebc807_93_get_activityManager,"discord.Core","get_activityManager",0xe5164e08,"discord.Core.get_activityManager","discord/Core.hx",93,0x605a4bfc)
HX_LOCAL_STACK_FRAME(_hx_pos_7ff51de226ebc807_75_create,"discord.Core","create",0x48f2d049,"discord.Core.create","discord/Core.hx",75,0x605a4bfc)

	namespace discord {
		class ActivityEvents {
			public:
				static void DISCORD_CALLBACK onActivityJoin(void* callbackData, const char* secret) {

				}

				static void DISCORD_CALLBACK onActivitySpectate(void* callbackData, const char* secret) {

				}

				static void DISCORD_CALLBACK onActivityJoinRequest(void* callbackData, DiscordUser* user)
				{

				}

				static void DISCORD_CALLBACK onActivityInvite(void* callbackData, EDiscordActivityActionType type, DiscordUser* user, DiscordActivity* activity) {

				}
		};

		/*IDiscordActivityEvents ActivityManager::events_{
			&ActivityEvents::onActivityJoin,
			&ActivityEvents::onActivitySpectate,
			&ActivityEvents::onActivityJoinRequest,
			&ActivityEvents::onActivityInvite
		};*/
	}

namespace discord{

void Core_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_7ff51de226ebc807_89_new)
HXDLIN(  89)		this->_activityManager =  ::discord::ActivityManager_obj::__alloc( HX_CTX );
            	}

Dynamic Core_obj::__CreateEmpty() { return new Core_obj; }

void *Core_obj::_hx_vtable = 0;

Dynamic Core_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Core_obj > _hx_result = new Core_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Core_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x43c6d42b;
}

void Core_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_7ff51de226ebc807_82_destroy)
            	if (internal_) {
		internal_->destroy(internal_);
		internal_ = nullptr;
	}

            	}


HX_DEFINE_DYNAMIC_FUNC0(Core_obj,destroy,(void))

int Core_obj::runCallbacks(){
            	HX_STACKFRAME(&_hx_pos_7ff51de226ebc807_86_runCallbacks)
            	return (int)internal_->run_callbacks(internal_);

HXDLIN(  86)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Core_obj,runCallbacks,return )

 ::discord::ActivityManager Core_obj::get_activityManager(){
            	HX_STACKFRAME(&_hx_pos_7ff51de226ebc807_93_get_activityManager)
            	_activityManager->internal_ = internal_->get_activity_manager(internal_);

HXDLIN(  93)		return this->_activityManager;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Core_obj,get_activityManager,return )

int Core_obj::create(::cpp::Int64 clientID,::cpp::UInt64 flags, ::discord::Core instance){
            	HX_STACKFRAME(&_hx_pos_7ff51de226ebc807_75_create)
            	Core* instanceptr = &instance;
					Core** instanceptrptr = &instanceptr;
	
					if (!instanceptrptr)
						return (int)EDiscordResult::DiscordResult_InternalError;

					(*instanceptrptr) = new Core();
					DiscordCreateParams params{};
					DiscordCreateParamsSetDefault(&params);
					params.client_id = clientID;
					params.flags = flags;
					params.events = nullptr;
					params.event_data = *instanceptrptr;
					params.user_events = nullptr;
					// params.activity_events = &ActivityManager::events_;
					params.relationship_events = nullptr;
					params.lobby_events = nullptr;
					params.network_events = nullptr;
					params.overlay_events = nullptr;
					params.store_events = nullptr;
					params.voice_events = nullptr;
					params.achievement_events = nullptr;
					EDiscordResult result = DiscordCreate(DISCORD_VERSION, &params, &((*instanceptr)->internal_));
					if (result != DiscordResult_Ok || !(*instanceptr)->internal_) {
						delete (*instanceptrptr);
						(*instanceptrptr) = nullptr;
					}
					return (int)result;

HXDLIN(  75)		return 0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Core_obj,create,return )


::hx::ObjectPtr< Core_obj > Core_obj::__new() {
	::hx::ObjectPtr< Core_obj > __this = new Core_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< Core_obj > Core_obj::__alloc(::hx::Ctx *_hx_ctx) {
	Core_obj *__this = (Core_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Core_obj), true, "discord.Core"));
	*(void **)__this = Core_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Core_obj::Core_obj()
{
}

void Core_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Core);
	HX_MARK_MEMBER_NAME(internal_,"internal_");
	HX_MARK_MEMBER_NAME(_activityManager,"_activityManager");
	HX_MARK_END_CLASS();
}

void Core_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(internal_,"internal_");
	HX_VISIT_MEMBER_NAME(_activityManager,"_activityManager");
}

::hx::Val Core_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"destroy") ) { return ::hx::Val( destroy_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"runCallbacks") ) { return ::hx::Val( runCallbacks_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"activityManager") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_activityManager() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"_activityManager") ) { return ::hx::Val( _activityManager ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"get_activityManager") ) { return ::hx::Val( get_activityManager_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Core_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { outValue = create_dyn(); return true; }
	}
	return false;
}

::hx::Val Core_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 16:
		if (HX_FIELD_EQ(inName,"_activityManager") ) { _activityManager=inValue.Cast<  ::discord::ActivityManager >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Core_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("internal_",82,ee,23,3f));
	outFields->push(HX_("_activityManager",df,b6,59,fe));
	outFields->push(HX_("activityManager",5e,74,7a,13));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Core_obj_sMemberStorageInfo[] = {
	{::hx::fsUnknown /*  IDiscordCore* */ ,(int)offsetof(Core_obj,internal_),HX_("internal_",82,ee,23,3f)},
	{::hx::fsObject /*  ::discord::ActivityManager */ ,(int)offsetof(Core_obj,_activityManager),HX_("_activityManager",df,b6,59,fe)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Core_obj_sStaticStorageInfo = 0;
#endif

static ::String Core_obj_sMemberFields[] = {
	HX_("destroy",fa,2c,86,24),
	HX_("runCallbacks",43,2a,78,15),
	HX_("_activityManager",df,b6,59,fe),
	HX_("get_activityManager",75,43,85,9e),
	::String(null()) };

::hx::Class Core_obj::__mClass;

static ::String Core_obj_sStaticFields[] = {
	HX_("create",fc,66,0f,7c),
	::String(null())
};

void Core_obj::__register()
{
	Core_obj _hx_dummy;
	Core_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("discord.Core",81,4f,fb,74);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Core_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Core_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Core_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Core_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Core_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Core_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace discord
