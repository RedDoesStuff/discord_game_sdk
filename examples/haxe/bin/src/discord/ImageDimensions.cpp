// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_6db1f306f8fa425f
#define INCLUDED_6db1f306f8fa425f
#include "C:/Users/Home/Documents/GitHub/discord_game_sdk/haxe/discord/_internal/ffi.h"
#endif
#ifndef INCLUDED_discord_ImageDimensions
#include <discord/ImageDimensions.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_04872bed4e2e3efe_372_new,"discord.ImageDimensions","new",0x8f98ea98,"discord.ImageDimensions.new","discord/Types.hx",372,0xbb915808)
HX_LOCAL_STACK_FRAME(_hx_pos_04872bed4e2e3efe_380_get_width,"discord.ImageDimensions","get_width",0x25d2a695,"discord.ImageDimensions.get_width","discord/Types.hx",380,0xbb915808)
HX_LOCAL_STACK_FRAME(_hx_pos_04872bed4e2e3efe_384_set_width,"discord.ImageDimensions","set_width",0x092392a1,"discord.ImageDimensions.set_width","discord/Types.hx",384,0xbb915808)
HX_LOCAL_STACK_FRAME(_hx_pos_04872bed4e2e3efe_390_get_height,"discord.ImageDimensions","get_height",0xa8ce9478,"discord.ImageDimensions.get_height","discord/Types.hx",390,0xbb915808)
HX_LOCAL_STACK_FRAME(_hx_pos_04872bed4e2e3efe_394_set_height,"discord.ImageDimensions","set_height",0xac4c32ec,"discord.ImageDimensions.set_height","discord/Types.hx",394,0xbb915808)
namespace discord{

void ImageDimensions_obj::__construct( ::Dynamic width, ::Dynamic height){
            	HX_STACKFRAME(&_hx_pos_04872bed4e2e3efe_372_new)
HXLINE( 373)		 ::Dynamic tmp = width;
HXDLIN( 373)		unsigned int _hx_tmp;
HXDLIN( 373)		if (::hx::IsNotNull( tmp )) {
HXLINE( 373)			_hx_tmp = ( (unsigned int)(tmp) );
            		}
            		else {
HXLINE( 373)			_hx_tmp = ( (unsigned int)(0) );
            		}
HXDLIN( 373)		this->set_width(_hx_tmp);
HXLINE( 374)		 ::Dynamic tmp1 = height;
HXDLIN( 374)		unsigned int _hx_tmp1;
HXDLIN( 374)		if (::hx::IsNotNull( tmp1 )) {
HXLINE( 374)			_hx_tmp1 = ( (unsigned int)(tmp1) );
            		}
            		else {
HXLINE( 374)			_hx_tmp1 = ( (unsigned int)(0) );
            		}
HXDLIN( 374)		this->set_height(_hx_tmp1);
            	}

Dynamic ImageDimensions_obj::__CreateEmpty() { return new ImageDimensions_obj; }

void *ImageDimensions_obj::_hx_vtable = 0;

Dynamic ImageDimensions_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ImageDimensions_obj > _hx_result = new ImageDimensions_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool ImageDimensions_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7d3bc63c;
}

unsigned int ImageDimensions_obj::get_width(){
            	HX_STACKFRAME(&_hx_pos_04872bed4e2e3efe_380_get_width)
            	return internal_.width;

HXDLIN( 380)		return ( (unsigned int)(0) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(ImageDimensions_obj,get_width,return )

unsigned int ImageDimensions_obj::set_width(unsigned int v){
            	HX_STACKFRAME(&_hx_pos_04872bed4e2e3efe_384_set_width)
            	internal_.width = v;

HXDLIN( 384)		return v;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ImageDimensions_obj,set_width,return )

unsigned int ImageDimensions_obj::get_height(){
            	HX_STACKFRAME(&_hx_pos_04872bed4e2e3efe_390_get_height)
            	return internal_.height;

HXDLIN( 390)		return ( (unsigned int)(0) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(ImageDimensions_obj,get_height,return )

unsigned int ImageDimensions_obj::set_height(unsigned int v){
            	HX_STACKFRAME(&_hx_pos_04872bed4e2e3efe_394_set_height)
            	internal_.height = v;

HXDLIN( 394)		return v;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ImageDimensions_obj,set_height,return )


ImageDimensions_obj::ImageDimensions_obj()
{
}

void ImageDimensions_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ImageDimensions);
	HX_MARK_MEMBER_NAME(internal_,"internal_");
	HX_MARK_END_CLASS();
}

void ImageDimensions_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(internal_,"internal_");
}

::hx::Val ImageDimensions_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_width() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_height() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"internal_") ) { return ::hx::Val( cpp::Struct<  DiscordImageDimensions >( internal_ ) ); }
		if (HX_FIELD_EQ(inName,"get_width") ) { return ::hx::Val( get_width_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_width") ) { return ::hx::Val( set_width_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_height") ) { return ::hx::Val( get_height_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_height") ) { return ::hx::Val( set_height_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val ImageDimensions_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_width(inValue.Cast< unsigned int >()) ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_height(inValue.Cast< unsigned int >()) ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"internal_") ) { internal_=inValue.Cast< cpp::Struct<  DiscordImageDimensions >  >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ImageDimensions_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("internal_",82,ee,23,3f));
	outFields->push(HX_("width",06,b6,62,ca));
	outFields->push(HX_("height",e7,07,4c,02));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo ImageDimensions_obj_sMemberStorageInfo[] = {
	{::hx::fsUnknown /*  DiscordImageDimensions */ ,(int)offsetof(ImageDimensions_obj,internal_),HX_("internal_",82,ee,23,3f)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *ImageDimensions_obj_sStaticStorageInfo = 0;
#endif

static ::String ImageDimensions_obj_sMemberFields[] = {
	HX_("internal_",82,ee,23,3f),
	HX_("get_width",5d,12,0c,0e),
	HX_("set_width",69,fe,5c,f1),
	HX_("get_height",b0,77,d3,f2),
	HX_("set_height",24,16,51,f6),
	::String(null()) };

::hx::Class ImageDimensions_obj::__mClass;

void ImageDimensions_obj::__register()
{
	ImageDimensions_obj _hx_dummy;
	ImageDimensions_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("discord.ImageDimensions",a6,fe,81,40);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ImageDimensions_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ImageDimensions_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ImageDimensions_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ImageDimensions_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace discord
