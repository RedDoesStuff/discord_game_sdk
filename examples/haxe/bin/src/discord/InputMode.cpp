// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_6db1f306f8fa425f
#define INCLUDED_6db1f306f8fa425f
#include "C:/Users/Home/Documents/GitHub/discord_game_sdk/haxe/discord/_internal/ffi.h"
#endif
#ifndef INCLUDED_discord_InputMode
#include <discord/InputMode.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_2041cf9c1610fe68_1191_new,"discord.InputMode","new",0xeb1a159d,"discord.InputMode.new","discord/Types.hx",1191,0xbb915808)
HX_LOCAL_STACK_FRAME(_hx_pos_2041cf9c1610fe68_1199_get_type,"discord.InputMode","get_type",0x17e84be6,"discord.InputMode.get_type","discord/Types.hx",1199,0xbb915808)
HX_LOCAL_STACK_FRAME(_hx_pos_2041cf9c1610fe68_1203_set_type,"discord.InputMode","set_type",0xc645a55a,"discord.InputMode.set_type","discord/Types.hx",1203,0xbb915808)
HX_LOCAL_STACK_FRAME(_hx_pos_2041cf9c1610fe68_1209_get_shortcut,"discord.InputMode","get_shortcut",0x0e4655b2,"discord.InputMode.get_shortcut","discord/Types.hx",1209,0xbb915808)
HX_LOCAL_STACK_FRAME(_hx_pos_2041cf9c1610fe68_1215_set_shortcut,"discord.InputMode","set_shortcut",0x233f7926,"discord.InputMode.set_shortcut","discord/Types.hx",1215,0xbb915808)
namespace discord{

void InputMode_obj::__construct( ::Dynamic type,::String shortcut){
            	HX_STACKFRAME(&_hx_pos_2041cf9c1610fe68_1191_new)
HXLINE(1192)		 ::Dynamic tmp = type;
HXDLIN(1192)		int _hx_tmp;
HXDLIN(1192)		if (::hx::IsNotNull( tmp )) {
HXLINE(1192)			_hx_tmp = ( (int)(tmp) );
            		}
            		else {
HXLINE(1192)			_hx_tmp = 0;
            		}
HXDLIN(1192)		this->set_type(_hx_tmp);
HXLINE(1193)		::String tmp1 = shortcut;
HXDLIN(1193)		::String _hx_tmp1;
HXDLIN(1193)		if (::hx::IsNotNull( tmp1 )) {
HXLINE(1193)			_hx_tmp1 = tmp1;
            		}
            		else {
HXLINE(1193)			_hx_tmp1 = HX_("",00,00,00,00);
            		}
HXDLIN(1193)		this->set_shortcut(_hx_tmp1);
            	}

Dynamic InputMode_obj::__CreateEmpty() { return new InputMode_obj; }

void *InputMode_obj::_hx_vtable = 0;

Dynamic InputMode_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< InputMode_obj > _hx_result = new InputMode_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool InputMode_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x57fb60a5;
}

int InputMode_obj::get_type(){
            	HX_STACKFRAME(&_hx_pos_2041cf9c1610fe68_1199_get_type)
            	return (int)internal_.type;

HXDLIN(1199)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(InputMode_obj,get_type,return )

int InputMode_obj::set_type(int v){
            	HX_STACKFRAME(&_hx_pos_2041cf9c1610fe68_1203_set_type)
            	internal_.type = (EDiscordInputModeType)v;

HXDLIN(1203)		return v;
            	}


HX_DEFINE_DYNAMIC_FUNC1(InputMode_obj,set_type,return )

::String InputMode_obj::get_shortcut(){
            	HX_STACKFRAME(&_hx_pos_2041cf9c1610fe68_1209_get_shortcut)
            	return internal_.shortcut;

HXDLIN(1209)		return HX_("",00,00,00,00);
            	}


HX_DEFINE_DYNAMIC_FUNC0(InputMode_obj,get_shortcut,return )

::String InputMode_obj::set_shortcut(::String v){
            	HX_STACKFRAME(&_hx_pos_2041cf9c1610fe68_1215_set_shortcut)
            	strncpy(internal_.shortcut, v, 256);
					internal_.shortcut[256 - 1] = '\0';
					return internal_.shortcut;

HXDLIN(1215)		return v;
            	}


HX_DEFINE_DYNAMIC_FUNC1(InputMode_obj,set_shortcut,return )


InputMode_obj::InputMode_obj()
{
}

void InputMode_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(InputMode);
	HX_MARK_MEMBER_NAME(internal_,"internal_");
	HX_MARK_END_CLASS();
}

void InputMode_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(internal_,"internal_");
}

::hx::Val InputMode_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_type() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"get_type") ) { return ::hx::Val( get_type_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_type") ) { return ::hx::Val( set_type_dyn() ); }
		if (HX_FIELD_EQ(inName,"shortcut") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_shortcut() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"internal_") ) { return ::hx::Val( cpp::Struct<  DiscordInputMode >( internal_ ) ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"get_shortcut") ) { return ::hx::Val( get_shortcut_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_shortcut") ) { return ::hx::Val( set_shortcut_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val InputMode_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_type(inValue.Cast< int >()) ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"shortcut") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_shortcut(inValue.Cast< ::String >()) ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"internal_") ) { internal_=inValue.Cast< cpp::Struct<  DiscordInputMode >  >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void InputMode_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("internal_",82,ee,23,3f));
	outFields->push(HX_("type",ba,f2,08,4d));
	outFields->push(HX_("shortcut",86,f6,a4,e8));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo InputMode_obj_sMemberStorageInfo[] = {
	{::hx::fsUnknown /*  DiscordInputMode */ ,(int)offsetof(InputMode_obj,internal_),HX_("internal_",82,ee,23,3f)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *InputMode_obj_sStaticStorageInfo = 0;
#endif

static ::String InputMode_obj_sMemberFields[] = {
	HX_("internal_",82,ee,23,3f),
	HX_("get_type",43,ae,c3,cc),
	HX_("set_type",b7,07,21,7b),
	HX_("get_shortcut",8f,aa,be,9d),
	HX_("set_shortcut",03,ce,b7,b2),
	::String(null()) };

::hx::Class InputMode_obj::__mClass;

void InputMode_obj::__register()
{
	InputMode_obj _hx_dummy;
	InputMode_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("discord.InputMode",2b,03,66,2b);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(InputMode_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< InputMode_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = InputMode_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = InputMode_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace discord
