// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_6db1f306f8fa425f
#define INCLUDED_6db1f306f8fa425f
#include "C:/Users/Home/Documents/GitHub/discord_game_sdk/haxe/discord/_internal/ffi.h"
#endif
#ifndef INCLUDED_discord_Lobby
#include <discord/Lobby.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_8776a44152521a1f_828_new,"discord.Lobby","new",0xcafadea6,"discord.Lobby.new","discord/Types.hx",828,0xbb915808)
HX_LOCAL_STACK_FRAME(_hx_pos_8776a44152521a1f_840_get_id,"discord.Lobby","get_id",0x2a2a949e,"discord.Lobby.get_id","discord/Types.hx",840,0xbb915808)
HX_LOCAL_STACK_FRAME(_hx_pos_8776a44152521a1f_844_set_id,"discord.Lobby","set_id",0xf672e912,"discord.Lobby.set_id","discord/Types.hx",844,0xbb915808)
HX_LOCAL_STACK_FRAME(_hx_pos_8776a44152521a1f_850_get_type,"discord.Lobby","get_type",0x00c5223d,"discord.Lobby.get_type","discord/Types.hx",850,0xbb915808)
HX_LOCAL_STACK_FRAME(_hx_pos_8776a44152521a1f_854_set_type,"discord.Lobby","set_type",0xaf227bb1,"discord.Lobby.set_type","discord/Types.hx",854,0xbb915808)
HX_LOCAL_STACK_FRAME(_hx_pos_8776a44152521a1f_860_get_ownerID,"discord.Lobby","get_ownerID",0xe6d5af2b,"discord.Lobby.get_ownerID","discord/Types.hx",860,0xbb915808)
HX_LOCAL_STACK_FRAME(_hx_pos_8776a44152521a1f_864_set_ownerID,"discord.Lobby","set_ownerID",0xf142b637,"discord.Lobby.set_ownerID","discord/Types.hx",864,0xbb915808)
HX_LOCAL_STACK_FRAME(_hx_pos_8776a44152521a1f_870_get_secret,"discord.Lobby","get_secret",0xa31364b3,"discord.Lobby.get_secret","discord/Types.hx",870,0xbb915808)
HX_LOCAL_STACK_FRAME(_hx_pos_8776a44152521a1f_876_set_secret,"discord.Lobby","set_secret",0xa6910327,"discord.Lobby.set_secret","discord/Types.hx",876,0xbb915808)
HX_LOCAL_STACK_FRAME(_hx_pos_8776a44152521a1f_882_get_capacity,"discord.Lobby","get_capacity",0x4838ae3d,"discord.Lobby.get_capacity","discord/Types.hx",882,0xbb915808)
HX_LOCAL_STACK_FRAME(_hx_pos_8776a44152521a1f_886_set_capacity,"discord.Lobby","set_capacity",0x5d31d1b1,"discord.Lobby.set_capacity","discord/Types.hx",886,0xbb915808)
HX_LOCAL_STACK_FRAME(_hx_pos_8776a44152521a1f_892_get_locked,"discord.Lobby","get_locked",0x98905b4d,"discord.Lobby.get_locked","discord/Types.hx",892,0xbb915808)
HX_LOCAL_STACK_FRAME(_hx_pos_8776a44152521a1f_896_set_locked,"discord.Lobby","set_locked",0x9c0df9c1,"discord.Lobby.set_locked","discord/Types.hx",896,0xbb915808)
namespace discord{

void Lobby_obj::__construct( ::Dynamic id, ::Dynamic type, ::Dynamic ownerID,::String secret, ::Dynamic capacity, ::Dynamic locked){
            	HX_STACKFRAME(&_hx_pos_8776a44152521a1f_828_new)
HXLINE( 829)		 ::Dynamic tmp = id;
HXDLIN( 829)		::cpp::Int64 _hx_tmp;
HXDLIN( 829)		if (::hx::IsNotNull( tmp )) {
HXLINE( 829)			_hx_tmp = ( (::cpp::Int64)(tmp) );
            		}
            		else {
HXLINE( 829)			_hx_tmp = ( (::cpp::Int64)(0) );
            		}
HXDLIN( 829)		this->set_id(_hx_tmp);
HXLINE( 830)		 ::Dynamic tmp1 = type;
HXDLIN( 830)		int _hx_tmp1;
HXDLIN( 830)		if (::hx::IsNotNull( tmp1 )) {
HXLINE( 830)			_hx_tmp1 = ( (int)(tmp1) );
            		}
            		else {
HXLINE( 830)			_hx_tmp1 = 1;
            		}
HXDLIN( 830)		this->set_type(_hx_tmp1);
HXLINE( 831)		 ::Dynamic tmp2 = ownerID;
HXDLIN( 831)		::cpp::Int64 _hx_tmp2;
HXDLIN( 831)		if (::hx::IsNotNull( tmp2 )) {
HXLINE( 831)			_hx_tmp2 = ( (::cpp::Int64)(tmp2) );
            		}
            		else {
HXLINE( 831)			_hx_tmp2 = ( (::cpp::Int64)(0) );
            		}
HXDLIN( 831)		this->set_ownerID(_hx_tmp2);
HXLINE( 832)		::String tmp3 = secret;
HXDLIN( 832)		::String _hx_tmp3;
HXDLIN( 832)		if (::hx::IsNotNull( tmp3 )) {
HXLINE( 832)			_hx_tmp3 = tmp3;
            		}
            		else {
HXLINE( 832)			_hx_tmp3 = HX_("",00,00,00,00).utf8_str();
            		}
HXDLIN( 832)		this->set_secret(_hx_tmp3);
HXLINE( 833)		 ::Dynamic tmp4 = capacity;
HXDLIN( 833)		unsigned int _hx_tmp4;
HXDLIN( 833)		if (::hx::IsNotNull( tmp4 )) {
HXLINE( 833)			_hx_tmp4 = ( (unsigned int)(tmp4) );
            		}
            		else {
HXLINE( 833)			_hx_tmp4 = ( (unsigned int)(0) );
            		}
HXDLIN( 833)		this->set_capacity(_hx_tmp4);
HXLINE( 834)		 ::Dynamic tmp5 = locked;
HXDLIN( 834)		bool _hx_tmp5;
HXDLIN( 834)		if (::hx::IsNotNull( tmp5 )) {
HXLINE( 834)			_hx_tmp5 = ( (bool)(tmp5) );
            		}
            		else {
HXLINE( 834)			_hx_tmp5 = false;
            		}
HXDLIN( 834)		this->set_locked(_hx_tmp5);
            	}

Dynamic Lobby_obj::__CreateEmpty() { return new Lobby_obj; }

void *Lobby_obj::_hx_vtable = 0;

Dynamic Lobby_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Lobby_obj > _hx_result = new Lobby_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5]);
	return _hx_result;
}

bool Lobby_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x38c1e3ca;
}

::cpp::Int64 Lobby_obj::get_id(){
            	HX_STACKFRAME(&_hx_pos_8776a44152521a1f_840_get_id)
            	return internal_.id;

HXDLIN( 840)		return ( (::cpp::Int64)(0) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(Lobby_obj,get_id,return )

::cpp::Int64 Lobby_obj::set_id(::cpp::Int64 v){
            	HX_STACKFRAME(&_hx_pos_8776a44152521a1f_844_set_id)
            	internal_.id = v;

HXDLIN( 844)		return v;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Lobby_obj,set_id,return )

int Lobby_obj::get_type(){
            	HX_STACKFRAME(&_hx_pos_8776a44152521a1f_850_get_type)
            	return (int)internal_.type;

HXDLIN( 850)		return 1;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Lobby_obj,get_type,return )

int Lobby_obj::set_type(int v){
            	HX_STACKFRAME(&_hx_pos_8776a44152521a1f_854_set_type)
            	internal_.type = (EDiscordLobbyType)v;

HXDLIN( 854)		return v;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Lobby_obj,set_type,return )

::cpp::Int64 Lobby_obj::get_ownerID(){
            	HX_STACKFRAME(&_hx_pos_8776a44152521a1f_860_get_ownerID)
            	return internal_.owner_id;

HXDLIN( 860)		return ( (::cpp::Int64)(0) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(Lobby_obj,get_ownerID,return )

::cpp::Int64 Lobby_obj::set_ownerID(::cpp::Int64 v){
            	HX_STACKFRAME(&_hx_pos_8776a44152521a1f_864_set_ownerID)
HXDLIN( 864)		return v;
internal_.owner_id = v;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Lobby_obj,set_ownerID,return )

::String Lobby_obj::get_secret(){
            	HX_STACKFRAME(&_hx_pos_8776a44152521a1f_870_get_secret)
            	return internal_.secret;

HXDLIN( 870)		return HX_("",00,00,00,00);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Lobby_obj,get_secret,return )

::String Lobby_obj::set_secret(::String v){
            	HX_STACKFRAME(&_hx_pos_8776a44152521a1f_876_set_secret)
            	strncpy(internal_.secret, v, 128);
					internal_.secret[128 - 1] = '\0';
					return internal_.secret;

HXDLIN( 876)		return v;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Lobby_obj,set_secret,return )

unsigned int Lobby_obj::get_capacity(){
            	HX_STACKFRAME(&_hx_pos_8776a44152521a1f_882_get_capacity)
            	return internal_.capacity;

HXDLIN( 882)		return ( (unsigned int)(0) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(Lobby_obj,get_capacity,return )

unsigned int Lobby_obj::set_capacity(unsigned int v){
            	HX_STACKFRAME(&_hx_pos_8776a44152521a1f_886_set_capacity)
            	internal_.capacity = v;

HXDLIN( 886)		return v;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Lobby_obj,set_capacity,return )

bool Lobby_obj::get_locked(){
            	HX_STACKFRAME(&_hx_pos_8776a44152521a1f_892_get_locked)
            	return internal_.locked;

HXDLIN( 892)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Lobby_obj,get_locked,return )

bool Lobby_obj::set_locked(bool v){
            	HX_STACKFRAME(&_hx_pos_8776a44152521a1f_896_set_locked)
            	internal_.locked = v;

HXDLIN( 896)		return v;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Lobby_obj,set_locked,return )


Lobby_obj::Lobby_obj()
{
}

void Lobby_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Lobby);
	HX_MARK_MEMBER_NAME(internal_,"internal_");
	HX_MARK_END_CLASS();
}

void Lobby_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(internal_,"internal_");
}

::hx::Val Lobby_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_id() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_type() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"get_id") ) { return ::hx::Val( get_id_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_id") ) { return ::hx::Val( set_id_dyn() ); }
		if (HX_FIELD_EQ(inName,"secret") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_secret() ); }
		if (HX_FIELD_EQ(inName,"locked") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_locked() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"ownerID") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_ownerID() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"get_type") ) { return ::hx::Val( get_type_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_type") ) { return ::hx::Val( set_type_dyn() ); }
		if (HX_FIELD_EQ(inName,"capacity") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_capacity() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"internal_") ) { return ::hx::Val( cpp::Struct<  DiscordLobby >( internal_ ) ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_secret") ) { return ::hx::Val( get_secret_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_secret") ) { return ::hx::Val( set_secret_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_locked") ) { return ::hx::Val( get_locked_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_locked") ) { return ::hx::Val( set_locked_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"get_ownerID") ) { return ::hx::Val( get_ownerID_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_ownerID") ) { return ::hx::Val( set_ownerID_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"get_capacity") ) { return ::hx::Val( get_capacity_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_capacity") ) { return ::hx::Val( set_capacity_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Lobby_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_id(inValue.Cast< ::cpp::Int64 >()) ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_type(inValue.Cast< int >()) ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"secret") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_secret(inValue.Cast< ::String >()) ); }
		if (HX_FIELD_EQ(inName,"locked") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_locked(inValue.Cast< bool >()) ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"ownerID") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_ownerID(inValue.Cast< ::cpp::Int64 >()) ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"capacity") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_capacity(inValue.Cast< unsigned int >()) ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"internal_") ) { internal_=inValue.Cast< cpp::Struct<  DiscordLobby >  >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Lobby_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("internal_",82,ee,23,3f));
	outFields->push(HX_("id",db,5b,00,00));
	outFields->push(HX_("type",ba,f2,08,4d));
	outFields->push(HX_("ownerID",ce,8a,73,35));
	outFields->push(HX_("secret",70,0e,4a,64));
	outFields->push(HX_("capacity",3a,01,bb,c3));
	outFields->push(HX_("locked",0a,05,c7,59));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Lobby_obj_sMemberStorageInfo[] = {
	{::hx::fsUnknown /*  DiscordLobby */ ,(int)offsetof(Lobby_obj,internal_),HX_("internal_",82,ee,23,3f)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Lobby_obj_sStaticStorageInfo = 0;
#endif

static ::String Lobby_obj_sMemberFields[] = {
	HX_("internal_",82,ee,23,3f),
	HX_("get_id",24,f3,2f,a3),
	HX_("set_id",98,47,78,6f),
	HX_("get_type",43,ae,c3,cc),
	HX_("set_type",b7,07,21,7b),
	HX_("get_ownerID",e5,ea,6d,bb),
	HX_("set_ownerID",f1,f1,da,c5),
	HX_("get_secret",39,7e,d1,54),
	HX_("set_secret",ad,1c,4f,58),
	HX_("get_capacity",43,b5,d4,78),
	HX_("set_capacity",b7,d8,cd,8d),
	HX_("get_locked",d3,74,4e,4a),
	HX_("set_locked",47,13,cc,4d),
	::String(null()) };

::hx::Class Lobby_obj::__mClass;

void Lobby_obj::__register()
{
	Lobby_obj _hx_dummy;
	Lobby_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("discord.Lobby",b4,53,79,15);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Lobby_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Lobby_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Lobby_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Lobby_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace discord
