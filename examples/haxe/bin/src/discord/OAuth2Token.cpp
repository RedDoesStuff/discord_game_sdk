// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_6db1f306f8fa425f
#define INCLUDED_6db1f306f8fa425f
#include "C:/Users/Home/Documents/GitHub/discord_game_sdk/haxe/discord/_internal/ffi.h"
#endif
#ifndef INCLUDED_discord_OAuth2Token
#include <discord/OAuth2Token.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_7834287e3156af85_286_new,"discord.OAuth2Token","new",0x8c9f252e,"discord.OAuth2Token.new","discord/Types.hx",286,0xbb915808)
HX_LOCAL_STACK_FRAME(_hx_pos_7834287e3156af85_295_get_accessToken,"discord.OAuth2Token","get_accessToken",0x019d741a,"discord.OAuth2Token.get_accessToken","discord/Types.hx",295,0xbb915808)
HX_LOCAL_STACK_FRAME(_hx_pos_7834287e3156af85_301_set_accessToken,"discord.OAuth2Token","set_accessToken",0xfd68f126,"discord.OAuth2Token.set_accessToken","discord/Types.hx",301,0xbb915808)
HX_LOCAL_STACK_FRAME(_hx_pos_7834287e3156af85_307_get_scopes,"discord.OAuth2Token","get_scopes",0x2d10611a,"discord.OAuth2Token.get_scopes","discord/Types.hx",307,0xbb915808)
HX_LOCAL_STACK_FRAME(_hx_pos_7834287e3156af85_313_set_scopes,"discord.OAuth2Token","set_scopes",0x308dff8e,"discord.OAuth2Token.set_scopes","discord/Types.hx",313,0xbb915808)
HX_LOCAL_STACK_FRAME(_hx_pos_7834287e3156af85_319_get_expires,"discord.OAuth2Token","get_expires",0xef669299,"discord.OAuth2Token.get_expires","discord/Types.hx",319,0xbb915808)
HX_LOCAL_STACK_FRAME(_hx_pos_7834287e3156af85_323_set_expires,"discord.OAuth2Token","set_expires",0xf9d399a5,"discord.OAuth2Token.set_expires","discord/Types.hx",323,0xbb915808)
namespace discord{

void OAuth2Token_obj::__construct(::String accessToken,::String scopes, ::Dynamic expires){
            	HX_STACKFRAME(&_hx_pos_7834287e3156af85_286_new)
HXLINE( 287)		::String tmp = accessToken;
HXDLIN( 287)		::String _hx_tmp;
HXDLIN( 287)		if (::hx::IsNotNull( tmp )) {
HXLINE( 287)			_hx_tmp = tmp;
            		}
            		else {
HXLINE( 287)			_hx_tmp = HX_("",00,00,00,00);
            		}
HXDLIN( 287)		this->set_accessToken(_hx_tmp);
HXLINE( 288)		::String tmp1 = scopes;
HXDLIN( 288)		::String _hx_tmp1;
HXDLIN( 288)		if (::hx::IsNotNull( tmp1 )) {
HXLINE( 288)			_hx_tmp1 = tmp1;
            		}
            		else {
HXLINE( 288)			_hx_tmp1 = HX_("",00,00,00,00);
            		}
HXDLIN( 288)		this->set_scopes(_hx_tmp1);
HXLINE( 289)		 ::Dynamic tmp2 = expires;
HXDLIN( 289)		::cpp::Int64 _hx_tmp2;
HXDLIN( 289)		if (::hx::IsNotNull( tmp2 )) {
HXLINE( 289)			_hx_tmp2 = ( (::cpp::Int64)(tmp2) );
            		}
            		else {
HXLINE( 289)			_hx_tmp2 = ( (::cpp::Int64)(0) );
            		}
HXDLIN( 289)		this->set_expires(_hx_tmp2);
            	}

Dynamic OAuth2Token_obj::__CreateEmpty() { return new OAuth2Token_obj; }

void *OAuth2Token_obj::_hx_vtable = 0;

Dynamic OAuth2Token_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< OAuth2Token_obj > _hx_result = new OAuth2Token_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool OAuth2Token_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x13b8ff2a;
}

::String OAuth2Token_obj::get_accessToken(){
            	HX_STACKFRAME(&_hx_pos_7834287e3156af85_295_get_accessToken)
            	return internal_.access_token;

HXDLIN( 295)		return HX_("",00,00,00,00);
            	}


HX_DEFINE_DYNAMIC_FUNC0(OAuth2Token_obj,get_accessToken,return )

::String OAuth2Token_obj::set_accessToken(::String v){
            	HX_STACKFRAME(&_hx_pos_7834287e3156af85_301_set_accessToken)
            	strncpy(internal_.access_token, v, 128);
					internal_.access_token[128 - 1] = '\0';
					return internal_.access_token;

HXDLIN( 301)		return v;
            	}


HX_DEFINE_DYNAMIC_FUNC1(OAuth2Token_obj,set_accessToken,return )

::String OAuth2Token_obj::get_scopes(){
            	HX_STACKFRAME(&_hx_pos_7834287e3156af85_307_get_scopes)
            	return internal_.scopes;

HXDLIN( 307)		return HX_("",00,00,00,00);
            	}


HX_DEFINE_DYNAMIC_FUNC0(OAuth2Token_obj,get_scopes,return )

::String OAuth2Token_obj::set_scopes(::String v){
            	HX_STACKFRAME(&_hx_pos_7834287e3156af85_313_set_scopes)
            	strncpy(internal_.scopes, v, 1024);
					internal_.scopes[1024 - 1] = '\0';
					return internal_.scopes;

HXDLIN( 313)		return v;
            	}


HX_DEFINE_DYNAMIC_FUNC1(OAuth2Token_obj,set_scopes,return )

::cpp::Int64 OAuth2Token_obj::get_expires(){
            	HX_STACKFRAME(&_hx_pos_7834287e3156af85_319_get_expires)
            	return internal_.expires;

HXDLIN( 319)		return ( (::cpp::Int64)(0) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(OAuth2Token_obj,get_expires,return )

::cpp::Int64 OAuth2Token_obj::set_expires(::cpp::Int64 v){
            	HX_STACKFRAME(&_hx_pos_7834287e3156af85_323_set_expires)
            	internal_.expires = v;

HXDLIN( 323)		return v;
            	}


HX_DEFINE_DYNAMIC_FUNC1(OAuth2Token_obj,set_expires,return )


OAuth2Token_obj::OAuth2Token_obj()
{
}

void OAuth2Token_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(OAuth2Token);
	HX_MARK_MEMBER_NAME(internal_,"internal_");
	HX_MARK_END_CLASS();
}

void OAuth2Token_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(internal_,"internal_");
}

::hx::Val OAuth2Token_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"scopes") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_scopes() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"expires") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_expires() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"internal_") ) { return ::hx::Val( cpp::Struct<  DiscordOAuth2Token >( internal_ ) ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_scopes") ) { return ::hx::Val( get_scopes_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_scopes") ) { return ::hx::Val( set_scopes_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"accessToken") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_accessToken() ); }
		if (HX_FIELD_EQ(inName,"get_expires") ) { return ::hx::Val( get_expires_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_expires") ) { return ::hx::Val( set_expires_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"get_accessToken") ) { return ::hx::Val( get_accessToken_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_accessToken") ) { return ::hx::Val( set_accessToken_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val OAuth2Token_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"scopes") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_scopes(inValue.Cast< ::String >()) ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"expires") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_expires(inValue.Cast< ::cpp::Int64 >()) ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"internal_") ) { internal_=inValue.Cast< cpp::Struct<  DiscordOAuth2Token >  >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"accessToken") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_accessToken(inValue.Cast< ::String >()) ); }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void OAuth2Token_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("internal_",82,ee,23,3f));
	outFields->push(HX_("accessToken",b5,6a,dd,a5));
	outFields->push(HX_("scopes",5f,f0,69,45));
	outFields->push(HX_("expires",b4,5f,6a,25));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo OAuth2Token_obj_sMemberStorageInfo[] = {
	{::hx::fsUnknown /*  DiscordOAuth2Token */ ,(int)offsetof(OAuth2Token_obj,internal_),HX_("internal_",82,ee,23,3f)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *OAuth2Token_obj_sStaticStorageInfo = 0;
#endif

static ::String OAuth2Token_obj_sMemberFields[] = {
	HX_("internal_",82,ee,23,3f),
	HX_("get_accessToken",4c,22,bf,66),
	HX_("set_accessToken",58,9f,8a,62),
	HX_("get_scopes",28,60,f1,35),
	HX_("set_scopes",9c,fe,6e,39),
	HX_("get_expires",cb,bf,64,ab),
	HX_("set_expires",d7,c6,d1,b5),
	::String(null()) };

::hx::Class OAuth2Token_obj::__mClass;

void OAuth2Token_obj::__register()
{
	OAuth2Token_obj _hx_dummy;
	OAuth2Token_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("discord.OAuth2Token",3c,b6,c5,2d);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(OAuth2Token_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< OAuth2Token_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = OAuth2Token_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = OAuth2Token_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace discord
