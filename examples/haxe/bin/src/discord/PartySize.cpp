// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_6db1f306f8fa425f
#define INCLUDED_6db1f306f8fa425f
#include "C:/Users/Home/Documents/GitHub/discord_game_sdk/haxe/discord/_internal/ffi.h"
#endif
#ifndef INCLUDED_discord_PartySize
#include <discord/PartySize.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_5a664c81e3c33cc7_491_new,"discord.PartySize","new",0x06563317,"discord.PartySize.new","discord/Types.hx",491,0xbb915808)
HX_LOCAL_STACK_FRAME(_hx_pos_5a664c81e3c33cc7_499_get_currentSize,"discord.PartySize","get_currentSize",0xd36e4a68,"discord.PartySize.get_currentSize","discord/Types.hx",499,0xbb915808)
HX_LOCAL_STACK_FRAME(_hx_pos_5a664c81e3c33cc7_503_set_currentSize,"discord.PartySize","set_currentSize",0xcf39c774,"discord.PartySize.set_currentSize","discord/Types.hx",503,0xbb915808)
HX_LOCAL_STACK_FRAME(_hx_pos_5a664c81e3c33cc7_509_get_maxSize,"discord.PartySize","get_maxSize",0x5f44cb53,"discord.PartySize.get_maxSize","discord/Types.hx",509,0xbb915808)
HX_LOCAL_STACK_FRAME(_hx_pos_5a664c81e3c33cc7_513_set_maxSize,"discord.PartySize","set_maxSize",0x69b1d25f,"discord.PartySize.set_maxSize","discord/Types.hx",513,0xbb915808)
namespace discord{

void PartySize_obj::__construct( ::Dynamic currentSize, ::Dynamic maxSize){
            	HX_STACKFRAME(&_hx_pos_5a664c81e3c33cc7_491_new)
HXLINE( 492)		 ::Dynamic tmp = currentSize;
HXDLIN( 492)		int _hx_tmp;
HXDLIN( 492)		if (::hx::IsNotNull( tmp )) {
HXLINE( 492)			_hx_tmp = ( (int)(tmp) );
            		}
            		else {
HXLINE( 492)			_hx_tmp = 0;
            		}
HXDLIN( 492)		this->set_currentSize(_hx_tmp);
HXLINE( 493)		 ::Dynamic tmp1 = maxSize;
HXDLIN( 493)		int _hx_tmp1;
HXDLIN( 493)		if (::hx::IsNotNull( tmp1 )) {
HXLINE( 493)			_hx_tmp1 = ( (int)(tmp1) );
            		}
            		else {
HXLINE( 493)			_hx_tmp1 = 0;
            		}
HXDLIN( 493)		this->set_maxSize(_hx_tmp1);
            	}

Dynamic PartySize_obj::__CreateEmpty() { return new PartySize_obj; }

void *PartySize_obj::_hx_vtable = 0;

Dynamic PartySize_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< PartySize_obj > _hx_result = new PartySize_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool PartySize_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x06c8b91f;
}

int PartySize_obj::get_currentSize(){
            	HX_STACKFRAME(&_hx_pos_5a664c81e3c33cc7_499_get_currentSize)
            	return internal_.current_size;

HXDLIN( 499)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(PartySize_obj,get_currentSize,return )

int PartySize_obj::set_currentSize(int v){
            	HX_STACKFRAME(&_hx_pos_5a664c81e3c33cc7_503_set_currentSize)
            	internal_.current_size = v;

HXDLIN( 503)		return v;
            	}


HX_DEFINE_DYNAMIC_FUNC1(PartySize_obj,set_currentSize,return )

int PartySize_obj::get_maxSize(){
            	HX_STACKFRAME(&_hx_pos_5a664c81e3c33cc7_509_get_maxSize)
            	return internal_.max_size;

HXDLIN( 509)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(PartySize_obj,get_maxSize,return )

int PartySize_obj::set_maxSize(int v){
            	HX_STACKFRAME(&_hx_pos_5a664c81e3c33cc7_513_set_maxSize)
            	internal_.max_size = v;

HXDLIN( 513)		return v;
            	}


HX_DEFINE_DYNAMIC_FUNC1(PartySize_obj,set_maxSize,return )


PartySize_obj::PartySize_obj()
{
}

void PartySize_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PartySize);
	HX_MARK_MEMBER_NAME(internal_,"internal_");
	HX_MARK_END_CLASS();
}

void PartySize_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(internal_,"internal_");
}

::hx::Val PartySize_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"maxSize") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_maxSize() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"internal_") ) { return ::hx::Val( cpp::Struct<  DiscordPartySize >( internal_ ) ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"currentSize") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_currentSize() ); }
		if (HX_FIELD_EQ(inName,"get_maxSize") ) { return ::hx::Val( get_maxSize_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_maxSize") ) { return ::hx::Val( set_maxSize_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"get_currentSize") ) { return ::hx::Val( get_currentSize_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_currentSize") ) { return ::hx::Val( set_currentSize_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val PartySize_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"maxSize") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_maxSize(inValue.Cast< int >()) ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"internal_") ) { internal_=inValue.Cast< cpp::Struct<  DiscordPartySize >  >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"currentSize") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_currentSize(inValue.Cast< int >()) ); }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void PartySize_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("internal_",82,ee,23,3f));
	outFields->push(HX_("currentSize",9a,79,e5,84));
	outFields->push(HX_("maxSize",85,f9,83,cc));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo PartySize_obj_sMemberStorageInfo[] = {
	{::hx::fsUnknown /*  DiscordPartySize */ ,(int)offsetof(PartySize_obj,internal_),HX_("internal_",82,ee,23,3f)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *PartySize_obj_sStaticStorageInfo = 0;
#endif

static ::String PartySize_obj_sMemberFields[] = {
	HX_("internal_",82,ee,23,3f),
	HX_("get_currentSize",31,31,c7,45),
	HX_("set_currentSize",3d,ae,92,41),
	HX_("get_maxSize",9c,59,7e,52),
	HX_("set_maxSize",a8,60,eb,5c),
	::String(null()) };

::hx::Class PartySize_obj::__mClass;

void PartySize_obj::__register()
{
	PartySize_obj _hx_dummy;
	PartySize_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("discord.PartySize",a5,5b,33,da);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(PartySize_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< PartySize_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PartySize_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PartySize_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace discord
