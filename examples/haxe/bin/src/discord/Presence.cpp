// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_6db1f306f8fa425f
#define INCLUDED_6db1f306f8fa425f
#include "C:/Users/Home/Documents/GitHub/discord_game_sdk/haxe/discord/_internal/ffi.h"
#endif
#ifndef INCLUDED_discord_Activity
#include <discord/Activity.h>
#endif
#ifndef INCLUDED_discord_ActivityAssets
#include <discord/ActivityAssets.h>
#endif
#ifndef INCLUDED_discord_ActivityParty
#include <discord/ActivityParty.h>
#endif
#ifndef INCLUDED_discord_ActivitySecrets
#include <discord/ActivitySecrets.h>
#endif
#ifndef INCLUDED_discord_ActivityTimestamps
#include <discord/ActivityTimestamps.h>
#endif
#ifndef INCLUDED_discord_Presence
#include <discord/Presence.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_138a6b60d426e7a7_749_new,"discord.Presence","new",0x1c70b0cf,"discord.Presence.new","discord/Types.hx",749,0xbb915808)
HX_LOCAL_STACK_FRAME(_hx_pos_138a6b60d426e7a7_761_get_status,"discord.Presence","get_status",0xc6a1f26c,"discord.Presence.get_status","discord/Types.hx",761,0xbb915808)
HX_LOCAL_STACK_FRAME(_hx_pos_138a6b60d426e7a7_765_set_status,"discord.Presence","set_status",0xca1f90e0,"discord.Presence.set_status","discord/Types.hx",765,0xbb915808)
HX_LOCAL_STACK_FRAME(_hx_pos_138a6b60d426e7a7_772_get_activity,"discord.Presence","get_activity",0xa45cfb89,"discord.Presence.get_activity","discord/Types.hx",772,0xbb915808)
HX_LOCAL_STACK_FRAME(_hx_pos_138a6b60d426e7a7_776_set_activity,"discord.Presence","set_activity",0xb9561efd,"discord.Presence.set_activity","discord/Types.hx",776,0xbb915808)
namespace discord{

void Presence_obj::__construct( ::Dynamic status, ::discord::Activity activity){
            	HX_GC_STACKFRAME(&_hx_pos_138a6b60d426e7a7_749_new)
HXLINE( 768)		this->_activity =  ::discord::Activity_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null());
HXLINE( 754)		 ::Dynamic tmp = status;
HXDLIN( 754)		int _hx_tmp;
HXDLIN( 754)		if (::hx::IsNotNull( tmp )) {
HXLINE( 754)			_hx_tmp = ( (int)(tmp) );
            		}
            		else {
HXLINE( 754)			_hx_tmp = 0;
            		}
HXDLIN( 754)		this->set_status(_hx_tmp);
HXLINE( 755)		 ::discord::Activity tmp1 = activity;
HXDLIN( 755)		 ::discord::Activity _hx_tmp1;
HXDLIN( 755)		if (::hx::IsNotNull( tmp1 )) {
HXLINE( 755)			_hx_tmp1 = tmp1;
            		}
            		else {
HXLINE( 755)			_hx_tmp1 =  ::discord::Activity_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null());
            		}
HXDLIN( 755)		this->set_activity(_hx_tmp1);
            	}

Dynamic Presence_obj::__CreateEmpty() { return new Presence_obj; }

void *Presence_obj::_hx_vtable = 0;

Dynamic Presence_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Presence_obj > _hx_result = new Presence_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Presence_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7fd21b23;
}

int Presence_obj::get_status(){
            	HX_STACKFRAME(&_hx_pos_138a6b60d426e7a7_761_get_status)
            	return (int)internal_.status;

HXDLIN( 761)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Presence_obj,get_status,return )

int Presence_obj::set_status(int v){
            	HX_STACKFRAME(&_hx_pos_138a6b60d426e7a7_765_set_status)
            	internal_.status = (EDiscordStatus)v;

HXDLIN( 765)		return v;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Presence_obj,set_status,return )

 ::discord::Activity Presence_obj::get_activity(){
            	HX_STACKFRAME(&_hx_pos_138a6b60d426e7a7_772_get_activity)
            	_activity->internal_ = internal_.activity;

HXDLIN( 772)		return this->_activity;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Presence_obj,get_activity,return )

 ::discord::Activity Presence_obj::set_activity( ::discord::Activity v){
            	HX_STACKFRAME(&_hx_pos_138a6b60d426e7a7_776_set_activity)
            	_activity->internal_ = v->internal_;

HXDLIN( 776)		return this->_activity;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Presence_obj,set_activity,return )


::hx::ObjectPtr< Presence_obj > Presence_obj::__new( ::Dynamic status, ::discord::Activity activity) {
	::hx::ObjectPtr< Presence_obj > __this = new Presence_obj();
	__this->__construct(status,activity);
	return __this;
}

::hx::ObjectPtr< Presence_obj > Presence_obj::__alloc(::hx::Ctx *_hx_ctx, ::Dynamic status, ::discord::Activity activity) {
	Presence_obj *__this = (Presence_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Presence_obj), true, "discord.Presence"));
	*(void **)__this = Presence_obj::_hx_vtable;
	__this->__construct(status,activity);
	return __this;
}

Presence_obj::Presence_obj()
{
}

void Presence_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Presence);
	HX_MARK_MEMBER_NAME(internal_,"internal_");
	HX_MARK_MEMBER_NAME(_activity,"_activity");
	HX_MARK_END_CLASS();
}

void Presence_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(internal_,"internal_");
	HX_VISIT_MEMBER_NAME(_activity,"_activity");
}

::hx::Val Presence_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"status") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_status() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"activity") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_activity() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"internal_") ) { return ::hx::Val( cpp::Struct<  DiscordPresence >( internal_ ) ); }
		if (HX_FIELD_EQ(inName,"_activity") ) { return ::hx::Val( _activity ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_status") ) { return ::hx::Val( get_status_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_status") ) { return ::hx::Val( set_status_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"get_activity") ) { return ::hx::Val( get_activity_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_activity") ) { return ::hx::Val( set_activity_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Presence_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"status") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_status(inValue.Cast< int >()) ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"activity") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_activity(inValue.Cast<  ::discord::Activity >()) ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"internal_") ) { internal_=inValue.Cast< cpp::Struct<  DiscordPresence >  >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_activity") ) { _activity=inValue.Cast<  ::discord::Activity >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Presence_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("internal_",82,ee,23,3f));
	outFields->push(HX_("status",32,e7,fb,05));
	outFields->push(HX_("_activity",2e,25,48,2d));
	outFields->push(HX_("activity",cf,2d,b2,e5));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Presence_obj_sMemberStorageInfo[] = {
	{::hx::fsUnknown /*  DiscordPresence */ ,(int)offsetof(Presence_obj,internal_),HX_("internal_",82,ee,23,3f)},
	{::hx::fsObject /*  ::discord::Activity */ ,(int)offsetof(Presence_obj,_activity),HX_("_activity",2e,25,48,2d)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Presence_obj_sStaticStorageInfo = 0;
#endif

static ::String Presence_obj_sMemberFields[] = {
	HX_("internal_",82,ee,23,3f),
	HX_("get_status",fb,56,83,f6),
	HX_("set_status",6f,f5,00,fa),
	HX_("_activity",2e,25,48,2d),
	HX_("get_activity",d8,e1,cb,9a),
	HX_("set_activity",4c,05,c5,af),
	::String(null()) };

::hx::Class Presence_obj::__mClass;

void Presence_obj::__register()
{
	Presence_obj _hx_dummy;
	Presence_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("discord.Presence",5d,9d,5e,81);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Presence_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Presence_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Presence_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Presence_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace discord
