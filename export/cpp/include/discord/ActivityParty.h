// Generated by Haxe 4.3.3
#ifndef INCLUDED_discord_ActivityParty
#define INCLUDED_discord_ActivityParty

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_6db1f306f8fa425f
#define INCLUDED_6db1f306f8fa425f
#include "C:/Users/Home/Documents/GitHub/discord_game_sdk/haxe/discord/_internal/ffi.h"
#endif
HX_DECLARE_CLASS1(discord,ActivityParty)
HX_DECLARE_CLASS1(discord,PartySize)

namespace discord{


class HXCPP_CLASS_ATTRIBUTES ActivityParty_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef ActivityParty_obj OBJ_;
		ActivityParty_obj();

	public:
		enum { _hx_ClassId = 0x2ee320ef };

		void __construct(::String id, ::discord::PartySize size, ::Dynamic privacy);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="discord.ActivityParty")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"discord.ActivityParty"); }
		static ::hx::ObjectPtr< ActivityParty_obj > __new(::String id, ::discord::PartySize size, ::Dynamic privacy);
		static ::hx::ObjectPtr< ActivityParty_obj > __alloc(::hx::Ctx *_hx_ctx,::String id, ::discord::PartySize size, ::Dynamic privacy);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~ActivityParty_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("ActivityParty",b7,b4,9d,a0); }

		 DiscordActivityParty internal_;
		::String get_id();
		::Dynamic get_id_dyn();

		::String set_id(::String v);
		::Dynamic set_id_dyn();

		 ::discord::PartySize _size;
		 ::discord::PartySize get_size();
		::Dynamic get_size_dyn();

		 ::discord::PartySize set_size( ::discord::PartySize v);
		::Dynamic set_size_dyn();

		int get_privacy();
		::Dynamic get_privacy_dyn();

		int set_privacy(int v);
		::Dynamic set_privacy_dyn();

};

} // end namespace discord

#endif /* INCLUDED_discord_ActivityParty */ 
