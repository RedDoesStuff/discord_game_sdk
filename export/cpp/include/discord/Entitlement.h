// Generated by Haxe 4.3.3
#ifndef INCLUDED_discord_Entitlement
#define INCLUDED_discord_Entitlement

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_3dec7e1e2465146e_1062_new)
#ifndef INCLUDED_6db1f306f8fa425f
#define INCLUDED_6db1f306f8fa425f
#include "C:/Users/Home/Documents/GitHub/discord_game_sdk/haxe/discord/_internal/ffi.h"
#endif
HX_DECLARE_CLASS1(discord,Entitlement)

namespace discord{


class HXCPP_CLASS_ATTRIBUTES Entitlement_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Entitlement_obj OBJ_;
		Entitlement_obj();

	public:
		enum { _hx_ClassId = 0x052a7461 };

		void __construct( ::Dynamic id, ::Dynamic type, ::Dynamic skuID);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="discord.Entitlement")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"discord.Entitlement"); }

		inline static ::hx::ObjectPtr< Entitlement_obj > __new( ::Dynamic id, ::Dynamic type, ::Dynamic skuID) {
			::hx::ObjectPtr< Entitlement_obj > __this = new Entitlement_obj();
			__this->__construct(id,type,skuID);
			return __this;
		}

		inline static ::hx::ObjectPtr< Entitlement_obj > __alloc(::hx::Ctx *_hx_ctx, ::Dynamic id, ::Dynamic type, ::Dynamic skuID) {
			Entitlement_obj *__this = (Entitlement_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Entitlement_obj), true, "discord.Entitlement"));
			*(void **)__this = Entitlement_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_3dec7e1e2465146e_1062_new)
HXLINE(1063)		 ::Dynamic tmp = id;
HXDLIN(1063)		::cpp::Int64 _hx_tmp;
HXDLIN(1063)		if (::hx::IsNotNull( tmp )) {
HXLINE(1063)			_hx_tmp = ( (::cpp::Int64)(tmp) );
            		}
            		else {
HXLINE(1063)			_hx_tmp = ( (::cpp::Int64)(0) );
            		}
HXDLIN(1063)		( ( ::discord::Entitlement)(__this) )->set_id(_hx_tmp);
HXLINE(1064)		 ::Dynamic tmp1 = type;
HXDLIN(1064)		int _hx_tmp1;
HXDLIN(1064)		if (::hx::IsNotNull( tmp1 )) {
HXLINE(1064)			_hx_tmp1 = ( (int)(tmp1) );
            		}
            		else {
HXLINE(1064)			_hx_tmp1 = 1;
            		}
HXDLIN(1064)		( ( ::discord::Entitlement)(__this) )->set_type(_hx_tmp1);
HXLINE(1065)		 ::Dynamic tmp2 = skuID;
HXDLIN(1065)		::cpp::Int64 _hx_tmp2;
HXDLIN(1065)		if (::hx::IsNotNull( tmp2 )) {
HXLINE(1065)			_hx_tmp2 = ( (::cpp::Int64)(tmp2) );
            		}
            		else {
HXLINE(1065)			_hx_tmp2 = ( (::cpp::Int64)(0) );
            		}
HXDLIN(1065)		( ( ::discord::Entitlement)(__this) )->set_skuID(_hx_tmp2);
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Entitlement_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Entitlement",8d,71,1d,dd); }

		 DiscordEntitlement internal_;
		::cpp::Int64 get_id();
		::Dynamic get_id_dyn();

		::cpp::Int64 set_id(::cpp::Int64 v);
		::Dynamic set_id_dyn();

		int get_type();
		::Dynamic get_type_dyn();

		int set_type(int v);
		::Dynamic set_type_dyn();

		::cpp::Int64 get_skuID();
		::Dynamic get_skuID_dyn();

		::cpp::Int64 set_skuID(::cpp::Int64 v);
		::Dynamic set_skuID_dyn();

};

} // end namespace discord

#endif /* INCLUDED_discord_Entitlement */ 
