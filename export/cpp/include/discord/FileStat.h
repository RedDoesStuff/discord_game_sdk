// Generated by Haxe 4.3.3
#ifndef INCLUDED_discord_FileStat
#define INCLUDED_discord_FileStat

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_2d17b4fae04d0d03_1019_new)
#ifndef INCLUDED_6db1f306f8fa425f
#define INCLUDED_6db1f306f8fa425f
#include "C:/Users/Home/Documents/GitHub/discord_game_sdk/haxe/discord/_internal/ffi.h"
#endif
HX_DECLARE_CLASS1(discord,FileStat)

namespace discord{


class HXCPP_CLASS_ATTRIBUTES FileStat_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef FileStat_obj OBJ_;
		FileStat_obj();

	public:
		enum { _hx_ClassId = 0x7ff9f920 };

		void __construct(::String filename, ::Dynamic size, ::Dynamic lastModified);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="discord.FileStat")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"discord.FileStat"); }

		inline static ::hx::ObjectPtr< FileStat_obj > __new(::String filename, ::Dynamic size, ::Dynamic lastModified) {
			::hx::ObjectPtr< FileStat_obj > __this = new FileStat_obj();
			__this->__construct(filename,size,lastModified);
			return __this;
		}

		inline static ::hx::ObjectPtr< FileStat_obj > __alloc(::hx::Ctx *_hx_ctx,::String filename, ::Dynamic size, ::Dynamic lastModified) {
			FileStat_obj *__this = (FileStat_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FileStat_obj), true, "discord.FileStat"));
			*(void **)__this = FileStat_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_2d17b4fae04d0d03_1019_new)
HXLINE(1020)		::String tmp = filename;
HXDLIN(1020)		::String _hx_tmp;
HXDLIN(1020)		if (::hx::IsNotNull( tmp )) {
HXLINE(1020)			_hx_tmp = tmp;
            		}
            		else {
HXLINE(1020)			_hx_tmp = HX_("",00,00,00,00);
            		}
HXDLIN(1020)		( ( ::discord::FileStat)(__this) )->set_filename(_hx_tmp);
HXLINE(1021)		 ::Dynamic tmp1 = size;
HXDLIN(1021)		::cpp::UInt64 _hx_tmp1;
HXDLIN(1021)		if (::hx::IsNotNull( tmp1 )) {
HXLINE(1021)			_hx_tmp1 = ( (::cpp::UInt64)(tmp1) );
            		}
            		else {
HXLINE(1021)			_hx_tmp1 = ( (::cpp::UInt64)(0) );
            		}
HXDLIN(1021)		( ( ::discord::FileStat)(__this) )->set_size(_hx_tmp1);
HXLINE(1022)		 ::Dynamic tmp2 = lastModified;
HXDLIN(1022)		::cpp::UInt64 _hx_tmp2;
HXDLIN(1022)		if (::hx::IsNotNull( tmp2 )) {
HXLINE(1022)			_hx_tmp2 = ( (::cpp::UInt64)(tmp2) );
            		}
            		else {
HXLINE(1022)			_hx_tmp2 = ( (::cpp::UInt64)(0) );
            		}
HXDLIN(1022)		( ( ::discord::FileStat)(__this) )->set_lastModified(_hx_tmp2);
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~FileStat_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("FileStat",90,88,51,3f); }

		 DiscordFileStat internal_;
		::String get_filename();
		::Dynamic get_filename_dyn();

		::String set_filename(::String v);
		::Dynamic set_filename_dyn();

		::cpp::UInt64 get_size();
		::Dynamic get_size_dyn();

		::cpp::UInt64 set_size(::cpp::UInt64 v);
		::Dynamic set_size_dyn();

		::cpp::UInt64 get_lastModified();
		::Dynamic get_lastModified_dyn();

		::cpp::UInt64 set_lastModified(::cpp::UInt64 v);
		::Dynamic set_lastModified_dyn();

};

} // end namespace discord

#endif /* INCLUDED_discord_FileStat */ 
