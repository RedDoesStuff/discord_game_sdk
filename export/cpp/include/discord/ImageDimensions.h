// Generated by Haxe 4.3.3
#ifndef INCLUDED_discord_ImageDimensions
#define INCLUDED_discord_ImageDimensions

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_04872bed4e2e3efe_372_new)
#ifndef INCLUDED_6db1f306f8fa425f
#define INCLUDED_6db1f306f8fa425f
#include "C:/Users/Home/Documents/GitHub/discord_game_sdk/haxe/discord/_internal/ffi.h"
#endif
HX_DECLARE_CLASS1(discord,ImageDimensions)

namespace discord{


class HXCPP_CLASS_ATTRIBUTES ImageDimensions_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef ImageDimensions_obj OBJ_;
		ImageDimensions_obj();

	public:
		enum { _hx_ClassId = 0x7d3bc63c };

		void __construct( ::Dynamic width, ::Dynamic height);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="discord.ImageDimensions")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"discord.ImageDimensions"); }

		inline static ::hx::ObjectPtr< ImageDimensions_obj > __new( ::Dynamic width, ::Dynamic height) {
			::hx::ObjectPtr< ImageDimensions_obj > __this = new ImageDimensions_obj();
			__this->__construct(width,height);
			return __this;
		}

		inline static ::hx::ObjectPtr< ImageDimensions_obj > __alloc(::hx::Ctx *_hx_ctx, ::Dynamic width, ::Dynamic height) {
			ImageDimensions_obj *__this = (ImageDimensions_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ImageDimensions_obj), true, "discord.ImageDimensions"));
			*(void **)__this = ImageDimensions_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_04872bed4e2e3efe_372_new)
HXLINE( 373)		 ::Dynamic tmp = width;
HXDLIN( 373)		unsigned int _hx_tmp;
HXDLIN( 373)		if (::hx::IsNotNull( tmp )) {
HXLINE( 373)			_hx_tmp = ( (unsigned int)(tmp) );
            		}
            		else {
HXLINE( 373)			_hx_tmp = ( (unsigned int)(0) );
            		}
HXDLIN( 373)		( ( ::discord::ImageDimensions)(__this) )->set_width(_hx_tmp);
HXLINE( 374)		 ::Dynamic tmp1 = height;
HXDLIN( 374)		unsigned int _hx_tmp1;
HXDLIN( 374)		if (::hx::IsNotNull( tmp1 )) {
HXLINE( 374)			_hx_tmp1 = ( (unsigned int)(tmp1) );
            		}
            		else {
HXLINE( 374)			_hx_tmp1 = ( (unsigned int)(0) );
            		}
HXDLIN( 374)		( ( ::discord::ImageDimensions)(__this) )->set_height(_hx_tmp1);
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~ImageDimensions_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("ImageDimensions",68,c9,92,ec); }

		 DiscordImageDimensions internal_;
		unsigned int get_width();
		::Dynamic get_width_dyn();

		unsigned int set_width(unsigned int v);
		::Dynamic set_width_dyn();

		unsigned int get_height();
		::Dynamic get_height_dyn();

		unsigned int set_height(unsigned int v);
		::Dynamic set_height_dyn();

};

} // end namespace discord

#endif /* INCLUDED_discord_ImageDimensions */ 
