// Generated by Haxe 4.3.3
#ifndef INCLUDED_discord_InputMode
#define INCLUDED_discord_InputMode

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_2041cf9c1610fe68_1191_new)
#ifndef INCLUDED_6db1f306f8fa425f
#define INCLUDED_6db1f306f8fa425f
#include "C:/Users/Home/Documents/GitHub/discord_game_sdk/haxe/discord/_internal/ffi.h"
#endif
HX_DECLARE_CLASS1(discord,InputMode)

namespace discord{


class HXCPP_CLASS_ATTRIBUTES InputMode_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef InputMode_obj OBJ_;
		InputMode_obj();

	public:
		enum { _hx_ClassId = 0x57fb60a5 };

		void __construct( ::Dynamic type,::String shortcut);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="discord.InputMode")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"discord.InputMode"); }

		inline static ::hx::ObjectPtr< InputMode_obj > __new( ::Dynamic type,::String shortcut) {
			::hx::ObjectPtr< InputMode_obj > __this = new InputMode_obj();
			__this->__construct(type,shortcut);
			return __this;
		}

		inline static ::hx::ObjectPtr< InputMode_obj > __alloc(::hx::Ctx *_hx_ctx, ::Dynamic type,::String shortcut) {
			InputMode_obj *__this = (InputMode_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(InputMode_obj), true, "discord.InputMode"));
			*(void **)__this = InputMode_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_2041cf9c1610fe68_1191_new)
HXLINE(1192)		 ::Dynamic tmp = type;
HXDLIN(1192)		int _hx_tmp;
HXDLIN(1192)		if (::hx::IsNotNull( tmp )) {
HXLINE(1192)			_hx_tmp = ( (int)(tmp) );
            		}
            		else {
HXLINE(1192)			_hx_tmp = 0;
            		}
HXDLIN(1192)		( ( ::discord::InputMode)(__this) )->set_type(_hx_tmp);
HXLINE(1193)		::String tmp1 = shortcut;
HXDLIN(1193)		::String _hx_tmp1;
HXDLIN(1193)		if (::hx::IsNotNull( tmp1 )) {
HXLINE(1193)			_hx_tmp1 = tmp1;
            		}
            		else {
HXLINE(1193)			_hx_tmp1 = HX_("",00,00,00,00);
            		}
HXDLIN(1193)		( ( ::discord::InputMode)(__this) )->set_shortcut(_hx_tmp1);
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~InputMode_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("InputMode",6d,70,5e,b1); }

		 DiscordInputMode internal_;
		int get_type();
		::Dynamic get_type_dyn();

		int set_type(int v);
		::Dynamic set_type_dyn();

		::String get_shortcut();
		::Dynamic get_shortcut_dyn();

		::String set_shortcut(::String v);
		::Dynamic set_shortcut_dyn();

};

} // end namespace discord

#endif /* INCLUDED_discord_InputMode */ 
