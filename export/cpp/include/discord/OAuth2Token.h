// Generated by Haxe 4.3.3
#ifndef INCLUDED_discord_OAuth2Token
#define INCLUDED_discord_OAuth2Token

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_7834287e3156af85_286_new)
#ifndef INCLUDED_6db1f306f8fa425f
#define INCLUDED_6db1f306f8fa425f
#include "C:/Users/Home/Documents/GitHub/discord_game_sdk/haxe/discord/_internal/ffi.h"
#endif
HX_DECLARE_CLASS1(discord,OAuth2Token)

namespace discord{


class HXCPP_CLASS_ATTRIBUTES OAuth2Token_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef OAuth2Token_obj OBJ_;
		OAuth2Token_obj();

	public:
		enum { _hx_ClassId = 0x13b8ff2a };

		void __construct(::String accessToken,::String scopes, ::Dynamic expires);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="discord.OAuth2Token")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"discord.OAuth2Token"); }

		inline static ::hx::ObjectPtr< OAuth2Token_obj > __new(::String accessToken,::String scopes, ::Dynamic expires) {
			::hx::ObjectPtr< OAuth2Token_obj > __this = new OAuth2Token_obj();
			__this->__construct(accessToken,scopes,expires);
			return __this;
		}

		inline static ::hx::ObjectPtr< OAuth2Token_obj > __alloc(::hx::Ctx *_hx_ctx,::String accessToken,::String scopes, ::Dynamic expires) {
			OAuth2Token_obj *__this = (OAuth2Token_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(OAuth2Token_obj), true, "discord.OAuth2Token"));
			*(void **)__this = OAuth2Token_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_7834287e3156af85_286_new)
HXLINE( 287)		::String tmp = accessToken;
HXDLIN( 287)		::String _hx_tmp;
HXDLIN( 287)		if (::hx::IsNotNull( tmp )) {
HXLINE( 287)			_hx_tmp = tmp;
            		}
            		else {
HXLINE( 287)			_hx_tmp = HX_("",00,00,00,00);
            		}
HXDLIN( 287)		( ( ::discord::OAuth2Token)(__this) )->set_accessToken(_hx_tmp);
HXLINE( 288)		::String tmp1 = scopes;
HXDLIN( 288)		::String _hx_tmp1;
HXDLIN( 288)		if (::hx::IsNotNull( tmp1 )) {
HXLINE( 288)			_hx_tmp1 = tmp1;
            		}
            		else {
HXLINE( 288)			_hx_tmp1 = HX_("",00,00,00,00);
            		}
HXDLIN( 288)		( ( ::discord::OAuth2Token)(__this) )->set_scopes(_hx_tmp1);
HXLINE( 289)		 ::Dynamic tmp2 = expires;
HXDLIN( 289)		::cpp::Int64 _hx_tmp2;
HXDLIN( 289)		if (::hx::IsNotNull( tmp2 )) {
HXLINE( 289)			_hx_tmp2 = ( (::cpp::Int64)(tmp2) );
            		}
            		else {
HXLINE( 289)			_hx_tmp2 = ( (::cpp::Int64)(0) );
            		}
HXDLIN( 289)		( ( ::discord::OAuth2Token)(__this) )->set_expires(_hx_tmp2);
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~OAuth2Token_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("OAuth2Token",fe,77,a5,74); }

		 DiscordOAuth2Token internal_;
		::String get_accessToken();
		::Dynamic get_accessToken_dyn();

		::String set_accessToken(::String v);
		::Dynamic set_accessToken_dyn();

		::String get_scopes();
		::Dynamic get_scopes_dyn();

		::String set_scopes(::String v);
		::Dynamic set_scopes_dyn();

		::cpp::Int64 get_expires();
		::Dynamic get_expires_dyn();

		::cpp::Int64 set_expires(::cpp::Int64 v);
		::Dynamic set_expires_dyn();

};

} // end namespace discord

#endif /* INCLUDED_discord_OAuth2Token */ 
