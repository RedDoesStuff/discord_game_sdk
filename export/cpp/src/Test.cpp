// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_a399fd0a245309ff
#define INCLUDED_a399fd0a245309ff
#include "C:/Users/Home/Documents/GitHub/discord_game_sdk/haxe/discord/ffi.h"
#endif
#ifndef INCLUDED_Test
#include <Test.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_df13cafffbed243f_9_main,"Test","main",0x9c6c95b5,"Test.main","Test.hx",9,0x8afb218c)
HX_LOCAL_STACK_FRAME(_hx_pos_df13cafffbed243f_22_makeUser,"Test","makeUser",0x050452d5,"Test.makeUser","Test.hx",22,0x8afb218c)

void Test_obj::__construct() { }

Dynamic Test_obj::__CreateEmpty() { return new Test_obj; }

void *Test_obj::_hx_vtable = 0;

Dynamic Test_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Test_obj > _hx_result = new Test_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Test_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0c25ea96;
}

 DiscordUser Test_obj::user;

 IDiscordLobbySearchQuery Test_obj::query;

void Test_obj::main(){
            	HX_STACKFRAME(&_hx_pos_df13cafffbed243f_9_main)
HXLINE(  10)		::Test_obj::makeUser();
HXLINE(  11)		::Test_obj::user.id = ( (::cpp::Int64)(10) );
HXLINE(  12)		::haxe::Log_obj::trace(::Test_obj::user.id,::hx::SourceInfo(HX_("Test.hx",8c,21,fb,8a),12,HX_("Test",72,f4,d2,37),HX_("main",39,38,56,48)));
HXLINE(  14)		 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN(  14)		 IDiscordLobbySearchQuery _hx_tmp1 = ::Test_obj::query;
HXDLIN(  14)		int _hx_tmp2 = _hx_tmp1.filter(&(::Test_obj::query),::Array_obj< char >::__new(0),EDiscordLobbySearchComparison::DiscordLobbySearchComparison_Equal,1,::Array_obj< char >::__new(0));
HXDLIN(  14)		_hx_tmp(_hx_tmp2,::hx::SourceInfo(HX_("Test.hx",8c,21,fb,8a),14,HX_("Test",72,f4,d2,37),HX_("main",39,38,56,48)));
HXLINE(  16)		int c = 0;
HXLINE(  17)		while(true){
HXLINE(  18)			c = (c + 1);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Test_obj,main,(void))

void Test_obj::makeUser(){
            	HX_STACKFRAME(&_hx_pos_df13cafffbed243f_22_makeUser)
            	user = DiscordUser();

            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Test_obj,makeUser,(void))


Test_obj::Test_obj()
{
}

bool Test_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"user") ) { outValue = ( cpp::Struct<  DiscordUser >( user ) ); return true; }
		if (HX_FIELD_EQ(inName,"main") ) { outValue = main_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"query") ) { outValue = ( cpp::Struct<  IDiscordLobbySearchQuery >( query ) ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"makeUser") ) { outValue = makeUser_dyn(); return true; }
	}
	return false;
}

bool Test_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"user") ) { user=ioValue.Cast< cpp::Struct<  DiscordUser >  >(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"query") ) { query=ioValue.Cast< cpp::Struct<  IDiscordLobbySearchQuery >  >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Test_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo Test_obj_sStaticStorageInfo[] = {
	{::hx::fsUnknown /*  DiscordUser */ ,(void *) &Test_obj::user,HX_("user",4b,92,ad,4d)},
	{::hx::fsUnknown /*  IDiscordLobbySearchQuery */ ,(void *) &Test_obj::query,HX_("query",08,8b,ea,5d)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void Test_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Test_obj::user,"user");
	HX_MARK_MEMBER_NAME(Test_obj::query,"query");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Test_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Test_obj::user,"user");
	HX_VISIT_MEMBER_NAME(Test_obj::query,"query");
};

#endif

::hx::Class Test_obj::__mClass;

static ::String Test_obj_sStaticFields[] = {
	HX_("user",4b,92,ad,4d),
	HX_("query",08,8b,ea,5d),
	HX_("main",39,38,56,48),
	HX_("makeUser",59,87,4b,44),
	::String(null())
};

void Test_obj::__register()
{
	Test_obj _hx_dummy;
	Test_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("Test",72,f4,d2,37);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Test_obj::__GetStatic;
	__mClass->mSetStaticField = &Test_obj::__SetStatic;
	__mClass->mMarkFunc = Test_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Test_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Test_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Test_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Test_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Test_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

