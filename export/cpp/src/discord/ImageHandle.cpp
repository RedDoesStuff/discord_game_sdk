// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_6db1f306f8fa425f
#define INCLUDED_6db1f306f8fa425f
#include "C:/Users/Home/Documents/GitHub/discord_game_sdk/haxe/discord/_internal/ffi.h"
#endif
#ifndef INCLUDED_discord_ImageHandle
#include <discord/ImageHandle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_bffcf66000ffc303_331_new,"discord.ImageHandle","new",0xb66a58f3,"discord.ImageHandle.new","discord/Types.hx",331,0xbb915808)
HX_LOCAL_STACK_FRAME(_hx_pos_bffcf66000ffc303_340_get_type,"discord.ImageHandle","get_type",0x967630d0,"discord.ImageHandle.get_type","discord/Types.hx",340,0xbb915808)
HX_LOCAL_STACK_FRAME(_hx_pos_bffcf66000ffc303_344_set_type,"discord.ImageHandle","set_type",0x44d38a44,"discord.ImageHandle.set_type","discord/Types.hx",344,0xbb915808)
HX_LOCAL_STACK_FRAME(_hx_pos_bffcf66000ffc303_350_get_id,"discord.ImageHandle","get_id",0xa508c871,"discord.ImageHandle.get_id","discord/Types.hx",350,0xbb915808)
HX_LOCAL_STACK_FRAME(_hx_pos_bffcf66000ffc303_354_set_id,"discord.ImageHandle","set_id",0x71511ce5,"discord.ImageHandle.set_id","discord/Types.hx",354,0xbb915808)
HX_LOCAL_STACK_FRAME(_hx_pos_bffcf66000ffc303_360_get_size,"discord.ImageHandle","get_size",0x95c0ded7,"discord.ImageHandle.get_size","discord/Types.hx",360,0xbb915808)
HX_LOCAL_STACK_FRAME(_hx_pos_bffcf66000ffc303_364_set_size,"discord.ImageHandle","set_size",0x441e384b,"discord.ImageHandle.set_size","discord/Types.hx",364,0xbb915808)
namespace discord{

void ImageHandle_obj::__construct( ::Dynamic type, ::Dynamic id, ::Dynamic size){
            	HX_STACKFRAME(&_hx_pos_bffcf66000ffc303_331_new)
HXLINE( 332)		 ::Dynamic tmp = type;
HXDLIN( 332)		int _hx_tmp;
HXDLIN( 332)		if (::hx::IsNotNull( tmp )) {
HXLINE( 332)			_hx_tmp = ( (int)(tmp) );
            		}
            		else {
HXLINE( 332)			_hx_tmp = 0;
            		}
HXDLIN( 332)		this->set_type(_hx_tmp);
HXLINE( 333)		 ::Dynamic tmp1 = id;
HXDLIN( 333)		::cpp::Int64 _hx_tmp1;
HXDLIN( 333)		if (::hx::IsNotNull( tmp1 )) {
HXLINE( 333)			_hx_tmp1 = ( (::cpp::Int64)(tmp1) );
            		}
            		else {
HXLINE( 333)			_hx_tmp1 = ( (::cpp::Int64)(0) );
            		}
HXDLIN( 333)		this->set_id(_hx_tmp1);
HXLINE( 334)		 ::Dynamic tmp2 = size;
HXDLIN( 334)		unsigned int _hx_tmp2;
HXDLIN( 334)		if (::hx::IsNotNull( tmp2 )) {
HXLINE( 334)			_hx_tmp2 = ( (unsigned int)(tmp2) );
            		}
            		else {
HXLINE( 334)			_hx_tmp2 = ( (unsigned int)(0) );
            		}
HXDLIN( 334)		this->set_size(_hx_tmp2);
            	}

Dynamic ImageHandle_obj::__CreateEmpty() { return new ImageHandle_obj; }

void *ImageHandle_obj::_hx_vtable = 0;

Dynamic ImageHandle_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ImageHandle_obj > _hx_result = new ImageHandle_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool ImageHandle_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0c7d2817;
}

int ImageHandle_obj::get_type(){
            	HX_STACKFRAME(&_hx_pos_bffcf66000ffc303_340_get_type)
            	return (int)internal_.type;

HXDLIN( 340)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ImageHandle_obj,get_type,return )

int ImageHandle_obj::set_type(int v){
            	HX_STACKFRAME(&_hx_pos_bffcf66000ffc303_344_set_type)
            	internal_.type = (EDiscordImageType)v;

HXDLIN( 344)		return v;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ImageHandle_obj,set_type,return )

::cpp::Int64 ImageHandle_obj::get_id(){
            	HX_STACKFRAME(&_hx_pos_bffcf66000ffc303_350_get_id)
            	return internal_.id;

HXDLIN( 350)		return ( (::cpp::Int64)(0) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(ImageHandle_obj,get_id,return )

::cpp::Int64 ImageHandle_obj::set_id(::cpp::Int64 v){
            	HX_STACKFRAME(&_hx_pos_bffcf66000ffc303_354_set_id)
            	internal_.id = v;

HXDLIN( 354)		return v;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ImageHandle_obj,set_id,return )

unsigned int ImageHandle_obj::get_size(){
            	HX_STACKFRAME(&_hx_pos_bffcf66000ffc303_360_get_size)
            	return internal_.size;

HXDLIN( 360)		return ( (unsigned int)(0) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(ImageHandle_obj,get_size,return )

unsigned int ImageHandle_obj::set_size(unsigned int v){
            	HX_STACKFRAME(&_hx_pos_bffcf66000ffc303_364_set_size)
            	internal_.size = v;

HXDLIN( 364)		return v;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ImageHandle_obj,set_size,return )


ImageHandle_obj::ImageHandle_obj()
{
}

void ImageHandle_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ImageHandle);
	HX_MARK_MEMBER_NAME(internal_,"internal_");
	HX_MARK_END_CLASS();
}

void ImageHandle_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(internal_,"internal_");
}

::hx::Val ImageHandle_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_id() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_type() ); }
		if (HX_FIELD_EQ(inName,"size") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_size() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"get_id") ) { return ::hx::Val( get_id_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_id") ) { return ::hx::Val( set_id_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"get_type") ) { return ::hx::Val( get_type_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_type") ) { return ::hx::Val( set_type_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_size") ) { return ::hx::Val( get_size_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_size") ) { return ::hx::Val( set_size_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"internal_") ) { return ::hx::Val( cpp::Struct<  DiscordImageHandle >( internal_ ) ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val ImageHandle_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_id(inValue.Cast< ::cpp::Int64 >()) ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_type(inValue.Cast< int >()) ); }
		if (HX_FIELD_EQ(inName,"size") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_size(inValue.Cast< unsigned int >()) ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"internal_") ) { internal_=inValue.Cast< cpp::Struct<  DiscordImageHandle >  >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ImageHandle_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("internal_",82,ee,23,3f));
	outFields->push(HX_("type",ba,f2,08,4d));
	outFields->push(HX_("id",db,5b,00,00));
	outFields->push(HX_("size",c1,a0,53,4c));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo ImageHandle_obj_sMemberStorageInfo[] = {
	{::hx::fsUnknown /*  DiscordImageHandle */ ,(int)offsetof(ImageHandle_obj,internal_),HX_("internal_",82,ee,23,3f)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *ImageHandle_obj_sStaticStorageInfo = 0;
#endif

static ::String ImageHandle_obj_sMemberFields[] = {
	HX_("internal_",82,ee,23,3f),
	HX_("get_type",43,ae,c3,cc),
	HX_("set_type",b7,07,21,7b),
	HX_("get_id",24,f3,2f,a3),
	HX_("set_id",98,47,78,6f),
	HX_("get_size",4a,5c,0e,cc),
	HX_("set_size",be,b5,6b,7a),
	::String(null()) };

::hx::Class ImageHandle_obj::__mClass;

void ImageHandle_obj::__register()
{
	ImageHandle_obj _hx_dummy;
	ImageHandle_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("discord.ImageHandle",81,63,90,9d);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ImageHandle_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ImageHandle_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ImageHandle_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ImageHandle_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace discord
