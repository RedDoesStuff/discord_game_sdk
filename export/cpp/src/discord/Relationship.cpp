// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_6db1f306f8fa425f
#define INCLUDED_6db1f306f8fa425f
#include "C:/Users/Home/Documents/GitHub/discord_game_sdk/haxe/discord/_internal/ffi.h"
#endif
#ifndef INCLUDED_discord_Activity
#include <discord/Activity.h>
#endif
#ifndef INCLUDED_discord_Presence
#include <discord/Presence.h>
#endif
#ifndef INCLUDED_discord_Relationship
#include <discord/Relationship.h>
#endif
#ifndef INCLUDED_discord_User
#include <discord/User.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_5cd440c2b252b798_781_new,"discord.Relationship","new",0x18950e8c,"discord.Relationship.new","discord/Types.hx",781,0xbb915808)
HX_LOCAL_STACK_FRAME(_hx_pos_5cd440c2b252b798_794_get_type,"discord.Relationship","get_type",0xe0f59097,"discord.Relationship.get_type","discord/Types.hx",794,0xbb915808)
HX_LOCAL_STACK_FRAME(_hx_pos_5cd440c2b252b798_798_set_type,"discord.Relationship","set_type",0x8f52ea0b,"discord.Relationship.set_type","discord/Types.hx",798,0xbb915808)
HX_LOCAL_STACK_FRAME(_hx_pos_5cd440c2b252b798_805_get_user,"discord.Relationship","get_user",0xe19a3028,"discord.Relationship.get_user","discord/Types.hx",805,0xbb915808)
HX_LOCAL_STACK_FRAME(_hx_pos_5cd440c2b252b798_809_set_user,"discord.Relationship","set_user",0x8ff7899c,"discord.Relationship.set_user","discord/Types.hx",809,0xbb915808)
HX_LOCAL_STACK_FRAME(_hx_pos_5cd440c2b252b798_816_get_presence,"discord.Relationship","get_presence",0x8964a298,"discord.Relationship.get_presence","discord/Types.hx",816,0xbb915808)
HX_LOCAL_STACK_FRAME(_hx_pos_5cd440c2b252b798_820_set_presence,"discord.Relationship","set_presence",0x9e5dc60c,"discord.Relationship.set_presence","discord/Types.hx",820,0xbb915808)
namespace discord{

void Relationship_obj::__construct( ::Dynamic type, ::discord::User user, ::discord::Presence presence){
            	HX_GC_STACKFRAME(&_hx_pos_5cd440c2b252b798_781_new)
HXLINE( 812)		this->_presence =  ::discord::Presence_obj::__alloc( HX_CTX ,null(),null());
HXLINE( 801)		this->_user =  ::discord::User_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null());
HXLINE( 786)		 ::Dynamic tmp = type;
HXDLIN( 786)		int _hx_tmp;
HXDLIN( 786)		if (::hx::IsNotNull( tmp )) {
HXLINE( 786)			_hx_tmp = ( (int)(tmp) );
            		}
            		else {
HXLINE( 786)			_hx_tmp = 0;
            		}
HXDLIN( 786)		this->set_type(_hx_tmp);
HXLINE( 787)		 ::discord::User tmp1 = user;
HXDLIN( 787)		 ::discord::User _hx_tmp1;
HXDLIN( 787)		if (::hx::IsNotNull( tmp1 )) {
HXLINE( 787)			_hx_tmp1 = tmp1;
            		}
            		else {
HXLINE( 787)			_hx_tmp1 =  ::discord::User_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null());
            		}
HXDLIN( 787)		this->set_user(_hx_tmp1);
HXLINE( 788)		 ::discord::Presence tmp2 = presence;
HXDLIN( 788)		 ::discord::Presence _hx_tmp2;
HXDLIN( 788)		if (::hx::IsNotNull( tmp2 )) {
HXLINE( 788)			_hx_tmp2 = tmp2;
            		}
            		else {
HXLINE( 788)			_hx_tmp2 =  ::discord::Presence_obj::__alloc( HX_CTX ,null(),null());
            		}
HXDLIN( 788)		this->set_presence(_hx_tmp2);
            	}

Dynamic Relationship_obj::__CreateEmpty() { return new Relationship_obj; }

void *Relationship_obj::_hx_vtable = 0;

Dynamic Relationship_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Relationship_obj > _hx_result = new Relationship_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool Relationship_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x1c3ee360;
}

int Relationship_obj::get_type(){
            	HX_STACKFRAME(&_hx_pos_5cd440c2b252b798_794_get_type)
            	return (int)internal_.type;

HXDLIN( 794)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Relationship_obj,get_type,return )

int Relationship_obj::set_type(int v){
            	HX_STACKFRAME(&_hx_pos_5cd440c2b252b798_798_set_type)
            	internal_.type = (EDiscordRelationshipType)v;

HXDLIN( 798)		return v;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Relationship_obj,set_type,return )

 ::discord::User Relationship_obj::get_user(){
            	HX_STACKFRAME(&_hx_pos_5cd440c2b252b798_805_get_user)
            	_user->internal_ = internal_.user;

HXDLIN( 805)		return this->_user;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Relationship_obj,get_user,return )

 ::discord::User Relationship_obj::set_user( ::discord::User v){
            	HX_STACKFRAME(&_hx_pos_5cd440c2b252b798_809_set_user)
            	_user->internal_ = v->internal_;

HXDLIN( 809)		return this->_user;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Relationship_obj,set_user,return )

 ::discord::Presence Relationship_obj::get_presence(){
            	HX_STACKFRAME(&_hx_pos_5cd440c2b252b798_816_get_presence)
            	_presence->internal_ = internal_.presence;

HXDLIN( 816)		return this->_presence;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Relationship_obj,get_presence,return )

 ::discord::Presence Relationship_obj::set_presence( ::discord::Presence v){
            	HX_STACKFRAME(&_hx_pos_5cd440c2b252b798_820_set_presence)
            	_presence->internal_ = v->internal_;

HXDLIN( 820)		return this->_presence;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Relationship_obj,set_presence,return )


::hx::ObjectPtr< Relationship_obj > Relationship_obj::__new( ::Dynamic type, ::discord::User user, ::discord::Presence presence) {
	::hx::ObjectPtr< Relationship_obj > __this = new Relationship_obj();
	__this->__construct(type,user,presence);
	return __this;
}

::hx::ObjectPtr< Relationship_obj > Relationship_obj::__alloc(::hx::Ctx *_hx_ctx, ::Dynamic type, ::discord::User user, ::discord::Presence presence) {
	Relationship_obj *__this = (Relationship_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Relationship_obj), true, "discord.Relationship"));
	*(void **)__this = Relationship_obj::_hx_vtable;
	__this->__construct(type,user,presence);
	return __this;
}

Relationship_obj::Relationship_obj()
{
}

void Relationship_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Relationship);
	HX_MARK_MEMBER_NAME(internal_,"internal_");
	HX_MARK_MEMBER_NAME(_user,"_user");
	HX_MARK_MEMBER_NAME(_presence,"_presence");
	HX_MARK_END_CLASS();
}

void Relationship_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(internal_,"internal_");
	HX_VISIT_MEMBER_NAME(_user,"_user");
	HX_VISIT_MEMBER_NAME(_presence,"_presence");
}

::hx::Val Relationship_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_type() ); }
		if (HX_FIELD_EQ(inName,"user") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_user() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_user") ) { return ::hx::Val( _user ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"get_type") ) { return ::hx::Val( get_type_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_type") ) { return ::hx::Val( set_type_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_user") ) { return ::hx::Val( get_user_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_user") ) { return ::hx::Val( set_user_dyn() ); }
		if (HX_FIELD_EQ(inName,"presence") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_presence() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"internal_") ) { return ::hx::Val( cpp::Struct<  DiscordRelationship >( internal_ ) ); }
		if (HX_FIELD_EQ(inName,"_presence") ) { return ::hx::Val( _presence ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"get_presence") ) { return ::hx::Val( get_presence_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_presence") ) { return ::hx::Val( set_presence_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Relationship_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_type(inValue.Cast< int >()) ); }
		if (HX_FIELD_EQ(inName,"user") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_user(inValue.Cast<  ::discord::User >()) ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_user") ) { _user=inValue.Cast<  ::discord::User >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"presence") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_presence(inValue.Cast<  ::discord::Presence >()) ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"internal_") ) { internal_=inValue.Cast< cpp::Struct<  DiscordRelationship >  >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_presence") ) { _presence=inValue.Cast<  ::discord::Presence >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Relationship_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("internal_",82,ee,23,3f));
	outFields->push(HX_("type",ba,f2,08,4d));
	outFields->push(HX_("_user",2a,ae,be,00));
	outFields->push(HX_("user",4b,92,ad,4d));
	outFields->push(HX_("_presence",9a,49,6d,ae));
	outFields->push(HX_("presence",3b,52,d7,66));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Relationship_obj_sMemberStorageInfo[] = {
	{::hx::fsUnknown /*  DiscordRelationship */ ,(int)offsetof(Relationship_obj,internal_),HX_("internal_",82,ee,23,3f)},
	{::hx::fsObject /*  ::discord::User */ ,(int)offsetof(Relationship_obj,_user),HX_("_user",2a,ae,be,00)},
	{::hx::fsObject /*  ::discord::Presence */ ,(int)offsetof(Relationship_obj,_presence),HX_("_presence",9a,49,6d,ae)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Relationship_obj_sStaticStorageInfo = 0;
#endif

static ::String Relationship_obj_sMemberFields[] = {
	HX_("internal_",82,ee,23,3f),
	HX_("get_type",43,ae,c3,cc),
	HX_("set_type",b7,07,21,7b),
	HX_("_user",2a,ae,be,00),
	HX_("get_user",d4,4d,68,cd),
	HX_("set_user",48,a7,c5,7b),
	HX_("_presence",9a,49,6d,ae),
	HX_("get_presence",44,06,f1,1b),
	HX_("set_presence",b8,29,ea,30),
	::String(null()) };

::hx::Class Relationship_obj::__mClass;

void Relationship_obj::__register()
{
	Relationship_obj _hx_dummy;
	Relationship_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("discord.Relationship",9a,18,38,34);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Relationship_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Relationship_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Relationship_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Relationship_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace discord
