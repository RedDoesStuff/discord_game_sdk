// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_6db1f306f8fa425f
#define INCLUDED_6db1f306f8fa425f
#include "C:/Users/Home/Documents/GitHub/discord_game_sdk/haxe/discord/_internal/ffi.h"
#endif
#ifndef INCLUDED_discord_User
#include <discord/User.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_13ae84296067bd31_217_new,"discord.User","new",0x112effdf,"discord.User.new","discord/Types.hx",217,0xbb915808)
HX_LOCAL_STACK_FRAME(_hx_pos_13ae84296067bd31_228_get_id,"discord.User","get_id",0xb22e3d05,"discord.User.get_id","discord/Types.hx",228,0xbb915808)
HX_LOCAL_STACK_FRAME(_hx_pos_13ae84296067bd31_232_set_id,"discord.User","set_id",0x7e769179,"discord.User.set_id","discord/Types.hx",232,0xbb915808)
HX_LOCAL_STACK_FRAME(_hx_pos_13ae84296067bd31_238_get_username,"discord.User","get_username",0x62bda2c0,"discord.User.get_username","discord/Types.hx",238,0xbb915808)
HX_LOCAL_STACK_FRAME(_hx_pos_13ae84296067bd31_244_set_username,"discord.User","set_username",0x77b6c634,"discord.User.set_username","discord/Types.hx",244,0xbb915808)
HX_LOCAL_STACK_FRAME(_hx_pos_13ae84296067bd31_250_get_discriminator,"discord.User","get_discriminator",0xfef72db2,"discord.User.get_discriminator","discord/Types.hx",250,0xbb915808)
HX_LOCAL_STACK_FRAME(_hx_pos_13ae84296067bd31_256_set_discriminator,"discord.User","set_discriminator",0x226505be,"discord.User.set_discriminator","discord/Types.hx",256,0xbb915808)
HX_LOCAL_STACK_FRAME(_hx_pos_13ae84296067bd31_262_get_avatar,"discord.User","get_avatar",0x1e633e43,"discord.User.get_avatar","discord/Types.hx",262,0xbb915808)
HX_LOCAL_STACK_FRAME(_hx_pos_13ae84296067bd31_268_set_avatar,"discord.User","set_avatar",0x21e0dcb7,"discord.User.set_avatar","discord/Types.hx",268,0xbb915808)
HX_LOCAL_STACK_FRAME(_hx_pos_13ae84296067bd31_274_get_bot,"discord.User","get_bot",0x3641e19d,"discord.User.get_bot","discord/Types.hx",274,0xbb915808)
HX_LOCAL_STACK_FRAME(_hx_pos_13ae84296067bd31_278_set_bot,"discord.User","set_bot",0x294372a9,"discord.User.set_bot","discord/Types.hx",278,0xbb915808)
namespace discord{

void User_obj::__construct( ::Dynamic id,::String username,::String discriminator,::String avatar, ::Dynamic bot){
            	HX_STACKFRAME(&_hx_pos_13ae84296067bd31_217_new)
HXLINE( 218)		 ::Dynamic tmp = id;
HXDLIN( 218)		::cpp::Int64 _hx_tmp;
HXDLIN( 218)		if (::hx::IsNotNull( tmp )) {
HXLINE( 218)			_hx_tmp = ( (::cpp::Int64)(tmp) );
            		}
            		else {
HXLINE( 218)			_hx_tmp = ( (::cpp::Int64)(0) );
            		}
HXDLIN( 218)		this->set_id(_hx_tmp);
HXLINE( 219)		::String tmp1 = username;
HXDLIN( 219)		::String _hx_tmp1;
HXDLIN( 219)		if (::hx::IsNotNull( tmp1 )) {
HXLINE( 219)			_hx_tmp1 = tmp1;
            		}
            		else {
HXLINE( 219)			_hx_tmp1 = HX_("",00,00,00,00);
            		}
HXDLIN( 219)		this->set_username(_hx_tmp1);
HXLINE( 220)		::String tmp2 = discriminator;
HXDLIN( 220)		::String _hx_tmp2;
HXDLIN( 220)		if (::hx::IsNotNull( tmp2 )) {
HXLINE( 220)			_hx_tmp2 = tmp2;
            		}
            		else {
HXLINE( 220)			_hx_tmp2 = HX_("",00,00,00,00);
            		}
HXDLIN( 220)		this->set_discriminator(_hx_tmp2);
HXLINE( 221)		::String tmp3 = avatar;
HXDLIN( 221)		::String _hx_tmp3;
HXDLIN( 221)		if (::hx::IsNotNull( tmp3 )) {
HXLINE( 221)			_hx_tmp3 = tmp3;
            		}
            		else {
HXLINE( 221)			_hx_tmp3 = HX_("",00,00,00,00);
            		}
HXDLIN( 221)		this->set_avatar(_hx_tmp3);
HXLINE( 222)		 ::Dynamic tmp4 = bot;
HXDLIN( 222)		bool _hx_tmp4;
HXDLIN( 222)		if (::hx::IsNotNull( tmp4 )) {
HXLINE( 222)			_hx_tmp4 = ( (bool)(tmp4) );
            		}
            		else {
HXLINE( 222)			_hx_tmp4 = false;
            		}
HXDLIN( 222)		this->set_bot(_hx_tmp4);
            	}

Dynamic User_obj::__CreateEmpty() { return new User_obj; }

void *User_obj::_hx_vtable = 0;

Dynamic User_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< User_obj > _hx_result = new User_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4]);
	return _hx_result;
}

bool User_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x4fafa917;
}

::cpp::Int64 User_obj::get_id(){
            	HX_STACKFRAME(&_hx_pos_13ae84296067bd31_228_get_id)
            	return internal_.id;

HXDLIN( 228)		return ( (::cpp::Int64)(0) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(User_obj,get_id,return )

::cpp::Int64 User_obj::set_id(::cpp::Int64 v){
            	HX_STACKFRAME(&_hx_pos_13ae84296067bd31_232_set_id)
            	internal_.id = v;

HXDLIN( 232)		return v;
            	}


HX_DEFINE_DYNAMIC_FUNC1(User_obj,set_id,return )

::String User_obj::get_username(){
            	HX_STACKFRAME(&_hx_pos_13ae84296067bd31_238_get_username)
            	return internal_.username;

HXDLIN( 238)		return HX_("",00,00,00,00);
            	}


HX_DEFINE_DYNAMIC_FUNC0(User_obj,get_username,return )

::String User_obj::set_username(::String v){
            	HX_STACKFRAME(&_hx_pos_13ae84296067bd31_244_set_username)
            	strncpy(internal_.username, v, 256);
					internal_.username[256 - 1] = '\0';
					return internal_.username;

HXDLIN( 244)		return v;
            	}


HX_DEFINE_DYNAMIC_FUNC1(User_obj,set_username,return )

::String User_obj::get_discriminator(){
            	HX_STACKFRAME(&_hx_pos_13ae84296067bd31_250_get_discriminator)
            	return internal_.discriminator;

HXDLIN( 250)		return HX_("",00,00,00,00);
            	}


HX_DEFINE_DYNAMIC_FUNC0(User_obj,get_discriminator,return )

::String User_obj::set_discriminator(::String v){
            	HX_STACKFRAME(&_hx_pos_13ae84296067bd31_256_set_discriminator)
            	strncpy(internal_.discriminator, v, 8);
					internal_.discriminator[8 - 1] = '\0';
					return internal_.discriminator;

HXDLIN( 256)		return v;
            	}


HX_DEFINE_DYNAMIC_FUNC1(User_obj,set_discriminator,return )

::String User_obj::get_avatar(){
            	HX_STACKFRAME(&_hx_pos_13ae84296067bd31_262_get_avatar)
            	return internal_.avatar;

HXDLIN( 262)		return HX_("",00,00,00,00);
            	}


HX_DEFINE_DYNAMIC_FUNC0(User_obj,get_avatar,return )

::String User_obj::set_avatar(::String v){
            	HX_STACKFRAME(&_hx_pos_13ae84296067bd31_268_set_avatar)
            	strncpy(internal_.avatar, v, 128);
					internal_.avatar[128 - 1] = '\0';
					return internal_.avatar;

HXDLIN( 268)		return v;
            	}


HX_DEFINE_DYNAMIC_FUNC1(User_obj,set_avatar,return )

bool User_obj::get_bot(){
            	HX_STACKFRAME(&_hx_pos_13ae84296067bd31_274_get_bot)
            	return internal_.bot;

HXDLIN( 274)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(User_obj,get_bot,return )

bool User_obj::set_bot(bool v){
            	HX_STACKFRAME(&_hx_pos_13ae84296067bd31_278_set_bot)
            	internal_.bot = v;

HXDLIN( 278)		return v;
            	}


HX_DEFINE_DYNAMIC_FUNC1(User_obj,set_bot,return )


User_obj::User_obj()
{
}

void User_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(User);
	HX_MARK_MEMBER_NAME(internal_,"internal_");
	HX_MARK_END_CLASS();
}

void User_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(internal_,"internal_");
}

::hx::Val User_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_id() ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"bot") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_bot() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"get_id") ) { return ::hx::Val( get_id_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_id") ) { return ::hx::Val( set_id_dyn() ); }
		if (HX_FIELD_EQ(inName,"avatar") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_avatar() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"get_bot") ) { return ::hx::Val( get_bot_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_bot") ) { return ::hx::Val( set_bot_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"username") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_username() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"internal_") ) { return ::hx::Val( cpp::Struct<  DiscordUser >( internal_ ) ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_avatar") ) { return ::hx::Val( get_avatar_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_avatar") ) { return ::hx::Val( set_avatar_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"get_username") ) { return ::hx::Val( get_username_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_username") ) { return ::hx::Val( set_username_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"discriminator") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_discriminator() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"get_discriminator") ) { return ::hx::Val( get_discriminator_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_discriminator") ) { return ::hx::Val( set_discriminator_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val User_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_id(inValue.Cast< ::cpp::Int64 >()) ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"bot") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_bot(inValue.Cast< bool >()) ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"avatar") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_avatar(inValue.Cast< ::String >()) ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"username") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_username(inValue.Cast< ::String >()) ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"internal_") ) { internal_=inValue.Cast< cpp::Struct<  DiscordUser >  >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"discriminator") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_discriminator(inValue.Cast< ::String >()) ); }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void User_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("internal_",82,ee,23,3f));
	outFields->push(HX_("id",db,5b,00,00));
	outFields->push(HX_("username",16,86,eb,20));
	outFields->push(HX_("discriminator",9c,72,43,23));
	outFields->push(HX_("avatar",19,80,5c,fa));
	outFields->push(HX_("bot",07,be,4a,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo User_obj_sMemberStorageInfo[] = {
	{::hx::fsUnknown /*  DiscordUser */ ,(int)offsetof(User_obj,internal_),HX_("internal_",82,ee,23,3f)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *User_obj_sStaticStorageInfo = 0;
#endif

static ::String User_obj_sMemberFields[] = {
	HX_("internal_",82,ee,23,3f),
	HX_("get_id",24,f3,2f,a3),
	HX_("set_id",98,47,78,6f),
	HX_("get_username",1f,3a,05,d6),
	HX_("set_username",93,5d,fe,ea),
	HX_("get_discriminator",f3,7d,b3,29),
	HX_("set_discriminator",ff,55,21,4d),
	HX_("get_avatar",e2,ef,e3,ea),
	HX_("set_avatar",56,8e,61,ee),
	HX_("get_bot",9e,86,bf,26),
	HX_("set_bot",aa,17,c1,19),
	::String(null()) };

::hx::Class User_obj::__mClass;

void User_obj::__register()
{
	User_obj _hx_dummy;
	User_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("discord.User",6d,24,e4,80);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(User_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< User_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = User_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = User_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace discord
